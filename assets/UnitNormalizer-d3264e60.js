import{i as l}from"./quantityFormatUtils-8ab4301f.js";import{x as s}from"./screenUtils-410d12c0.js";import{o as m,v as f}from"./vec2-8acac370.js";import{o as h,u as p,g as u}from"./vec3-015ca254.js";import{$ as n}from"./Extent-2ad2c9a9.js";const z={readOnly:!0,get(){return l(this.view)}};var a;(function(t){t[t.Auto=0]="Auto",t[t.Euclidean=1]="Euclidean",t[t.Geodesic=2]="Geodesic"})(a||(a={}));function A(t,e){if(h(e,0,0,0),t.length>0){for(let r=0;r<t.length;++r)p(e,e,t[r]);u(e,e,1/t.length)}}function D(t,e,r,i){i.projectToRenderScreen(t,o),i.projectToRenderScreen(e,c),m(r,R,_),f(r,r)}const o=s(),_=o,c=s(),R=c;class E{constructor(e=null){this.spatialReference=e}get spatialReference(){return this._spatialReference}set spatialReference(e){e!==this._spatialReference&&(this._spatialReference=e,this._updateNormalizationFactors())}normalizeDistance(e){return e*this._metersPerDistanceUnit}normalizeElevation(e){return e*this._metersPerElevationUnit}normalizeArea(e){return e*this._squareMetersPerAreaUnit}_updateNormalizationFactors(){this._metersPerDistanceUnit=n(this._spatialReference,1),this._metersPerElevationUnit=n(this._spatialReference,1),this._squareMetersPerAreaUnit=this._metersPerDistanceUnit*this._metersPerDistanceUnit}}export{z as a,A as c,a as e,D as f,E as t};

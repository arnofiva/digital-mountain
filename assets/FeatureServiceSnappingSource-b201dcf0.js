import{e as o,y as n,a as _,v as k,t as M,n as R,_ as T}from"./cast-8b575ab3.js";import{d as E,a as N}from"./HandleOwner-f773ce72.js";import{r as d,t as H,o as x,g as U,B as j}from"./typedArrayUtil-ce39e5f4.js";import{y as A,f as C,g as f}from"./promiseUtils-e37fe75d.js";import{l as w,U as z,h as S,a as D}from"./reactiveUtils-042dd05a.js";import"./ArrayPool-5813d861.js";import{p as J,t as V}from"./Scheduler-3113abcd.js";import{y as Z}from"./elevationInfoUtils-ab005f9a.js";import{t as $,j as L,p as q}from"./TileInfo-f339e6a5.js";import{o as W}from"./vec3-015ca254.js";import{n as G}from"./vec4f64-6d0e93be.js";import{bC as B,dw as Q,dx as K,B as X,dy as Y}from"./index-334863ed.js";import{i as tt,p as et}from"./queryEngineUtils-3ae9042f.js";import{v as it}from"./Polyline-889037e7.js";import{f as rt,o as ot}from"./aaBoundingRect-41e05474.js";import{b as nt}from"./TileTreeDebugger-f0716264.js";import{h as st}from"./LercDecoder-e072a355.js";import{o as at}from"./typeUtils-700e0da4.js";import{M as pt}from"./dehydratedFeatures-55779981.js";import{w as lt}from"./Extent-680ef92a.js";import"./string-7a324480.js";import"./Error-685fdf30.js";import"./nextTick-3ee5a785.js";import"./SimpleObservable-6f002ab0.js";import"./ElevationInfo-ad190ee6.js";import"./fieldUtils-1ecec444.js";import"./preload-helper-41c905a7.js";import"./arcadeOnDemand-a1bf65ec.js";import"./geometry-bad16232.js";import"./lengthUtils-1d09729e.js";import"./Ellipsoid-89682c5e.js";import"./common-d0b63c2d.js";import"./IdentityManager-13ed5348.js";import"./request-fc61835a.js";import"./Evented-d959ede6.js";import"./intl-b84fb3c9.js";import"./number-134e9f14.js";import"./locale-30120714.js";import"./messages-8a541332.js";import"./assets-5052bbaa.js";import"./Promise-e757e514.js";import"./uuid-73213768.js";import"./dom-2ec1e33c.js";import"./Graphic-96c42a4d.js";import"./PopupTemplate-8ac0cb61.js";import"./Clonable-2b8b60cc.js";import"./Collection-47946fa8.js";import"./enumeration-4ec8d3f9.js";import"./Identifiable-96150ecf.js";import"./symbols-0f3de684.js";import"./CIMSymbol-cdddfd9c.js";import"./Color-ad49dc79.js";import"./colorUtils-639f4d25.js";import"./mathUtils-5b623c84.js";import"./vec4-c7a19f0d.js";import"./screenUtils-410d12c0.js";import"./opacityUtils-6b5cbdc2.js";import"./symbolLayerUtils3D-51cc6d75.js";import"./aaBoundingBox-04c58f5a.js";import"./persistableUrlUtils-1c5d7615.js";import"./Symbol3DAnchorPosition2D-142c1e90.js";import"./collectionUtils-25147e5f.js";import"./Portal-7ecdc9f0.js";import"./Loadable-695031ac.js";import"./PortalGroup-ea788274.js";import"./PortalUser-a1aa49cd.js";import"./jsonUtils-03437bcd.js";import"./Basemap-f5ca570d.js";import"./deprecate-9828d7d2.js";import"./loadAll-8401c5ec.js";import"./asyncUtils-623987a8.js";import"./PortalItem-6549afda.js";import"./writeUtils-ff257e5e.js";import"./layerUtils-0c01cb0c.js";import"./compilerUtils-175b9e40.js";import"./CollectionFlattener-9bc75576.js";import"./TablesMixin-b6031ef9.js";import"./Layer-b29c44e3.js";import"./Cyclical-34b2a5e3.js";import"./MultiOriginJSONSupport-a1d33be9.js";import"./originUtils-1469eeaf.js";import"./multiOriginJSONSupportUtils-c978f4c3.js";import"./HeightModelInfo-42ae0f61.js";import"./projection-582e07d8.js";import"./mat4-4714ff8c.js";import"./zscale-def794ea.js";import"./arcgisLayerUrl-81a33ec5.js";import"./ViewingMode-5d7d590b.js";import"./saveUtils-bf4b189a.js";import"./resourceUtils-e6e10558.js";import"./fieldType-232282e5.js";import"./OperationalLayer-c3a14c54.js";import"./TimeExtent-d116f9c4.js";import"./plane-e5e66c24.js";import"./sphere-8ab93b42.js";import"./byteSizeEstimations-f0cab514.js";import"./mat3f64-50f3b9f6.js";import"./mat4f64-abdda1bb.js";import"./quatf64-f8f1c132.js";import"./vec2f64-f35767d6.js";import"./mat3-4fd89d48.js";import"./Octree-d990d188.js";import"./Util-c12e93ba.js";import"./scaleUtils-87bb90d3.js";import"./lineSegment-b352e49e.js";import"./objectResourceUtils-8909e8c3.js";import"./devEnvironmentUtils-5002a058.js";import"./BufferView-da65c548.js";import"./vec2-8acac370.js";import"./vec33-8529ce65.js";import"./DefaultMaterial_COLOR_GAMMA-87d1f8e6.js";import"./types-e1c0a5bf.js";import"./enums-fc527c7c.js";import"./Version-419f71e1.js";import"./quat-99c4e099.js";import"./resourceUtils-527631ac.js";import"./basicInterfaces-7449a8bf.js";import"./Indices-37e06e9a.js";import"./DefaultMaterial.glsl-7d7dc23e.js";import"./ForwardLinearDepth.glsl-a0929473.js";import"./Matrix3PassUniform-0b3b1bba.js";import"./ShaderBuilder-7bfc11d2.js";import"./vec3f32-01c06d8d.js";import"./VertexAttribute-15d1866a.js";import"./View.glsl-03db830e.js";import"./mat4f32-60a2394b.js";import"./Texture2DPassUniform-70e1e126.js";import"./MixExternalColor.glsl-99b269fe.js";import"./ShaderTechniqueConfiguration-ee770726.js";import"./symbolColorUtils-834d5fca.js";import"./PhysicallyBasedRendering.glsl-32dfb9c7.js";import"./FloatPassUniform-e3702139.js";import"./Float4PassUniform-7f3c3ce8.js";import"./RgbaFloatEncoding.glsl-4a25e2a7.js";import"./Texture2DDrawUniform-02720a73.js";import"./PiUtils.glsl-5ee49495.js";import"./VisualVariablePassParameters-8cb0a75a.js";import"./VertexElementDescriptor-2925c6af.js";import"./Texture-bf6b5582.js";import"./context-util-7ede29e5.js";import"./Slice.glsl-7975394d.js";import"./Transform.glsl-7294c426.js";import"./ObjectAndLayerIdColor.glsl-a64028da.js";import"./OutputDepth.glsl-f581dcdd.js";import"./OutputHighlight.glsl-08aacdf4.js";import"./VisualVariables.glsl-9e988d16.js";import"./DiscardOrAdjustAlphaBlend.glsl-f19054e7.js";import"./AlphaCutoff-96178e0d.js";import"./TransparencyPassType-a6b20292.js";import"./VertexColor.glsl-79a8c465.js";import"./VerticalOffset.glsl-5354e013.js";import"./Normals.glsl-0f400ece.js";import"./EvaluateSceneLighting.glsl-5da94bb7.js";import"./SSAOBlur.glsl-7265df26.js";import"./ScreenSpacePass.glsl-fee70090.js";import"./ReadLinearDepth.glsl-53a01bc1.js";import"./SSAO.glsl-c9cc39dd.js";import"./MultipassTerrainTest.glsl-43f42334.js";import"./vec2f32-eaf29605.js";import"./Texture-87febf19.js";import"./TextureOnly.glsl-548e665f.js";import"./Attribute-f72d3f37.js";import"./InterleavedLayout-d75b8228.js";import"./DefaultTechniqueConfiguration-5fedee5c.js";import"./RealisticTree.glsl-1e8f0ea9.js";import"./GraphicsLayer-70f87af0.js";import"./BlendLayer-291a2b49.js";import"./ScaleRangeLayer-7ff6c0d3.js";import"./workers-c3882da6.js";import"./Connection-6bd43370.js";import"./spatialReferenceEllipsoidUtils-23733e37.js";import"./AttachmentInfo-6f2ba68c.js";import"./AttachmentQuery-061e93ef.js";import"./LegendOptions-de492976.js";import"./DimensionalDefinition-4b26df38.js";import"./UniqueValueRenderer-3904f4cc.js";import"./diffUtils-0c65d604.js";import"./colorRamps-ddfecb23.js";import"./sizeVariableUtils-d4870b0d.js";import"./visualVariableUtils-a1979e31.js";import"./jsonUtils-e877a23b.js";import"./styleUtils-305d8f69.js";import"./vectorFieldUtils-3e325848.js";import"./colorUtils-7641d345.js";import"./normalizeUtils-6bee55d6.js";import"./normalizeUtilsCommon-17a95432.js";import"./ItemCache-c0904c4f.js";import"./MemCache-1d0e264b.js";import"./cimSymbolUtils-bff8b59b.js";import"./utils-3d986af0.js";import"./jsonUtils-b2e5d321.js";import"./DictionaryLoader-1438695d.js";import"./LRUCache-16cff7d8.js";import"./heatmapUtils-bc76f08e.js";import"./Query-65d38c02.js";import"./Field-1bc3a16a.js";import"./executeQueryJSON-04f85be1.js";import"./query-b200d7cb.js";import"./pbfQueryUtils-f001828a.js";import"./pbf-68e00ce0.js";import"./OptimizedFeature-7f37a325.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-bd6bba60.js";import"./FeatureSet-cb704b51.js";import"./featureConversionUtils-c227ec85.js";import"./RelationshipQuery-0abdb3e2.js";import"./TopFeaturesQuery-3a519c5e.js";import"./FeatureLayer-f2f6536e.js";import"./serviceCapabilitiesUtils-6f645c61.js";import"./FeatureLayerBase-b19f7ee7.js";import"./TimeReference-aeda2bb8.js";import"./datetime-b6333958.js";import"./editsZScale-eefb35e6.js";import"./APIKeyMixin-d7cb7220.js";import"./ArcGISService-7ce81abb.js";import"./CustomParametersMixin-0dbce8f2.js";import"./EditBusLayer-faff46ba.js";import"./FeatureReductionLayer-55e6b2c4.js";import"./labelingInfo-8462538e.js";import"./labelUtils-61dff46d.js";import"./defaultsJSON-59981e75.js";import"./OrderedLayer-f840e564.js";import"./PortalLayer-7f6f61d4.js";import"./portalItemUtils-ba37e370.js";import"./RefreshableLayer-51d28698.js";import"./TemporalLayer-12ea8921.js";import"./FeatureTemplate-26b6ba5d.js";import"./FeatureType-474514d1.js";import"./fieldProperties-66b12497.js";import"./FieldsIndex-967913ce.js";import"./versionUtils-f77d2452.js";import"./styleUtils-4d62e921.js";import"./popupUtils-7d1e2de5.js";import"./callExpressionWithFeature-6f3761f2.js";import"./quantizationUtils-dc028b68.js";import"./webStyleSymbolUtils-0f876db3.js";import"./ElevationSamplerData-b8eeacdf.js";import"./WaterSurface.glsl-55a88d78.js";import"./NormalUtils.glsl-f259fe4a.js";import"./HUD.glsl-79bd614f.js";import"./edgeProcessing-fa6d4038.js";import"./deduplicate-dffc7dea.js";import"./MeshComponent-f5ec9479.js";import"./earcut-61f7b102.js";import"./projection-c67d3c7f.js";import"./HUDMaterial.glsl-caa3e151.js";import"./sdfPrimitives-86e63320.js";import"./floatRGBA-11065dbc.js";import"./labelFormatUtils-695eab3b.js";import"./orientedBoundingBox-8bbf4141.js";import"./quatf32-51a323b8.js";import"./LineCallout.glsl-ede36b7c.js";import"./QueryEngineResult-c580d29f.js";import"./WhereClause-cbd158ef.js";import"./executionError-fb3f283a.js";import"./utils-f1e38d04.js";import"./generateRendererUtils-65ba2788.js";import"./json-48e3ea08.js";import"./MarkerSizing.glsl-0f21463c.js";import"./RibbonLine.glsl-376e988d.js";import"./LineStipple.glsl-dfd34f08.js";import"./LineMarker.glsl-b68d2081.js";import"./NativeLine.glsl-38506d53.js";import"./Path.glsl-5da6ce18.js";import"./ColorMaterial.glsl-d42d7e44.js";import"./Pattern.glsl-cc643bcf.js";import"./enums-fb086c25.js";import"./config-f7904f35.js";import"./TileKey-ae8a9188.js";import"./workerHelper-7b69330e.js";import"./capabilities-8176ed28.js";import"./geometryEngine-68f880a9.js";import"./geometryEngineBase-e1a33b0a.js";import"./hydrated-61d2b3c5.js";import"./floating-ui-8c8de742.js";import"./StreamLayer-b816a6d3.js";import"./SceneFilter-8312e3bf.js";import"./persistable-63f0629a.js";import"./resourceExtension-a93bca74.js";import"./DimensionAnalysis-0ac2f8cd.js";import"./Analysis-cc5bd6fb.js";import"./ExportImageParameters-c93de02f.js";import"./sublayerUtils-7a7b4353.js";import"./VertexSnappingCandidate-f9610e8f.js";import"./PointSnappingHint-d61d3bbf.js";function I(t,e){return Q(e.extent,F),K(F,W(mt,t.x,t.y,0))}const F=B(),mt=G();let h=class extends k{get tiles(){const e=this.tilesCoveringView,i=d(this.pointOfInterest)?this.pointOfInterest:this.view.center;return e.sort((s,r)=>I(i,s)-I(i,r)),e}_scaleEnabled(){return X(this.view.scale,this.layer.minScale||0,this.layer.maxScale||0)}get tilesCoveringView(){if(!this.view.ready||!this.view.featuresTilingScheme||!this.view.state||H(this.tileInfo))return[];if(!this._scaleEnabled)return[];const{spans:e,lodInfo:i}=this.view.featuresTilingScheme.getTileCoverage(this.view.state,0),{level:s}=i,r=[];for(const{row:p,colFrom:a,colTo:l}of e)for(let c=a;c<=l;c++){const v=i.normalizeCol(c),b=new $(null,s,p,v);this.tileInfo.updateTileInfo(b),r.push(b)}return r}get tileInfo(){var e;return((e=this.view.featuresTilingScheme)==null?void 0:e.tileInfo)??null}get tileSize(){return d(this.tileInfo)?this.tileInfo.size[0]:256}constructor(e){super(e),this.pointOfInterest=null}initialize(){this.addHandles(w(()=>{var e,i;return(i=(e=this.view)==null?void 0:e.state)==null?void 0:i.viewpoint},()=>this.notifyChange("tilesCoveringView"),z))}};o([n({readOnly:!0})],h.prototype,"tiles",null),o([n({readOnly:!0})],h.prototype,"_scaleEnabled",null),o([n({readOnly:!0})],h.prototype,"tilesCoveringView",null),o([n({readOnly:!0})],h.prototype,"tileInfo",null),o([n({readOnly:!0})],h.prototype,"tileSize",null),o([n({constructOnly:!0})],h.prototype,"view",void 0),o([n({constructOnly:!0})],h.prototype,"layer",void 0),o([n()],h.prototype,"pointOfInterest",void 0),h=o([_("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTiles2D")],h);let y=class extends E{get tiles(){const t=this.tilesCoveringView,e=this._effectivePointOfInterest;if(d(e)){const i=t.map(s=>I(e,s));for(let s=1;s<i.length;s++)if(i[s-1]>i[s])return t.sort((r,p)=>I(e,r)-I(e,p)),t.slice()}return t}get tilesCoveringView(){var t,e;return this._filterTiles((e=(t=this.view.featureTiles)==null?void 0:t.tiles)==null?void 0:e.toArray()).map(dt)}get tileInfo(){var t;return((t=this.view.featureTiles)==null?void 0:t.tilingScheme.toTileInfo())??null}get tileSize(){var t;return((t=this.view.featureTiles)==null?void 0:t.tileSize)??256}get _effectivePointOfInterest(){var e;const t=this.pointOfInterest;return d(t)?t:(e=this.view.pointsOfInterest)==null?void 0:e.focus.location}constructor(t){super(t),this.pointOfInterest=null}initialize(){this.handles.add(w(()=>this.view.featureTiles,t=>{this.handles.remove(P),t&&this.handles.add(t.addClient(),P)},S))}_filterTiles(t){return H(t)?[]:t.filter(e=>Math.abs(e.measures.screenRect[3]-e.measures.screenRect[1])>ut&&e.measures.visibility===Y.VISIBLE_ON_SURFACE)}};function dt({lij:[t,e,i],extent:s}){return new $(`${t}/${e}/${i}`,t,e,i,s)}o([n({readOnly:!0})],y.prototype,"tiles",null),o([n({readOnly:!0})],y.prototype,"tilesCoveringView",null),o([n({readOnly:!0})],y.prototype,"tileInfo",null),o([n({readOnly:!0})],y.prototype,"tileSize",null),o([n({constructOnly:!0})],y.prototype,"view",void 0),o([n()],y.prototype,"pointOfInterest",void 0),o([n()],y.prototype,"_effectivePointOfInterest",null),y=o([_("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTiles3D")],y);const ut=50,P="feature-tiles";let O=class extends nt{constructor(t){super(t),this._handles=new M}initialize(){const t=setInterval(()=>this._fetchDebugInfo(),2e3);this._handles.add(R(()=>clearInterval(t)))}destroy(){this._handles.destroy()}getTiles(){if(!this._debugInfo)return[];const t=new Map,e=new Map;this._debugInfo.storedTiles.forEach(r=>{t.set(r.data.id,r.featureCount)}),this._debugInfo.pendingTiles.forEach(r=>{t.set(r.data.id,r.featureCount),e.set(r.data.id,r.state)});const i=r=>{const p=e.get(r),a=t.get(r)??"?";return p?`${p}:${a}
${r}`:`store:${a}
${r}`},s=new Map;return this._debugInfo.storedTiles.forEach(r=>{s.set(r.data.id,r.data)}),this._debugInfo.pendingTiles.forEach(r=>{s.set(r.data.id,r.data)}),Array.from(s.values()).map(r=>({lij:[r.level,r.row,r.col],geometry:it.fromExtent(rt(r.extent,this.view.spatialReference)),label:i(r.id)}))}_fetchDebugInfo(){this.handle.getDebugInfo(null).then(t=>{this._debugInfo=t,this.update()})}};o([n({constructOnly:!0})],O.prototype,"handle",void 0),O=o([_("esri.views.interactive.snapping.featureSources.WorkerTileTreeDebugger")],O);let m=class extends E{get updating(){return this.updatingHandles.updating||this._workerHandleUpdating}constructor(t){super(t),this.schedule=null,this.hasZ=!1,this.elevationAlignPointsInFeatures=async e=>{const i=[];for(const{points:s}of e)for(const{z:r}of s)i.push(r);return{elevations:i,drapedObjectIds:new Set,failedObjectIds:new Set}},this.queryForSymbologySnapping=async()=>({candidates:[],sourceCandidateIndices:[]}),this.availability=0,this._workerHandleUpdating=!0,this._editId=0}destroy(){this._workerHandle.destroy()}initialize(){this._workerHandle=new ht(this.schedule,{alignElevation:async(t,{signal:e})=>({result:await this.elevationAlignPointsInFeatures(t.points,e)}),getSymbologyCandidates:async(t,{signal:e})=>({result:await this.queryForSymbologySnapping(t,e)})}),this.handles.add([this._workerHandle.on("notify-updating",({updating:t})=>this._workerHandleUpdating=t),this._workerHandle.on("notify-availability",({availability:t})=>this._set("availability",t))])}async setup(t,e){var r;const i=this._serviceInfoFromLayer(t.layer);if(H(i))return;const s={configuration:this._convertConfiguration(t.configuration),serviceInfo:i,spatialReference:t.spatialReference.toJSON(),hasZ:this.hasZ,elevationInfo:(r=t.layer.elevationInfo)==null?void 0:r.toJSON()};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("setup",s,e)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},e))}async configure(t,e){const i=this._convertConfiguration(t);await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("configure",i,e)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},e))}async refresh(t){await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("refresh",{},t)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},t))}async fetchCandidates(t,e){const i=t.point,s={distance:t.distance,mode:t.mode,point:pt(i[0],i[1],i[2],t.coordinateHelper.spatialReference.toJSON()),types:t.types,filter:d(t.filter)?t.filter.toJSON():null};return this._workerHandle.invoke(s,e)}async updateTiles(t,e){const i={tiles:t.tiles,tileInfo:d(t.tileInfo)?t.tileInfo.toJSON():null,tileSize:t.tileSize};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("updateTiles",i,e)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},e))}async applyEdits(t,e){var a,l,c;const i=this._editId++,s={id:i};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("beginApplyEdits",s,e));const r=await this.updatingHandles.addPromise(A(t.result,e)),p={id:i,edits:{addedFeatures:((a=r.addedFeatures)==null?void 0:a.map(({objectId:v})=>v).filter(d))??[],deletedFeatures:((l=r.deletedFeatures)==null?void 0:l.map(({objectId:v,globalId:b})=>({objectId:v,globalId:b})))??[],updatedFeatures:((c=r.updatedFeatures)==null?void 0:c.map(({objectId:v})=>v).filter(d))??[]}};await this.updatingHandles.addPromise(this._workerHandle.invokeMethod("endApplyEdits",p,e)),this.updatingHandles.addPromise(this._workerHandle.invokeMethod("whenNotUpdating",{},e))}getDebugInfo(t){return this._workerHandle.invokeMethod("getDebugInfo",{},t)}async notifyElevationSourceChange(){await this._workerHandle.invokeMethod("notifyElevationSourceChange",{})}async notifySymbologyChange(){await this._workerHandle.invokeMethod("notifySymbologyChange",{})}async setSymbologySnappingSupported(t){await this._workerHandle.invokeMethod("setSymbologySnappingSupported",t)}_convertConfiguration(t){return{filter:d(t.filter)?t.filter.toJSON():null,customParameters:t.customParameters,viewType:t.viewType}}_serviceInfoFromLayer(t){var e,i;return t.geometryType==="multipatch"||t.geometryType==="mesh"?null:{url:((e=t.parsedUrl)==null?void 0:e.path)??"",fields:t.fields.map(s=>s.toJSON()),geometryType:at.toJSON(t.geometryType),capabilities:t.capabilities,objectIdField:t.objectIdField,globalIdField:t.globalIdField,spatialReference:t.spatialReference.toJSON(),timeInfo:(i=t.timeInfo)==null?void 0:i.toJSON()}}};o([n({constructOnly:!0})],m.prototype,"schedule",void 0),o([n({constructOnly:!0})],m.prototype,"hasZ",void 0),o([n({constructOnly:!0})],m.prototype,"elevationAlignPointsInFeatures",void 0),o([n({constructOnly:!0})],m.prototype,"queryForSymbologySnapping",void 0),o([n({readOnly:!0})],m.prototype,"updating",null),o([n({readOnly:!0})],m.prototype,"availability",void 0),o([n()],m.prototype,"_workerHandleUpdating",void 0),m=o([_("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceSnappingSourceWorkerHandle")],m);class ht extends st{constructor(e,i){super("FeatureServiceSnappingSourceWorker","fetchCandidates",{},e,{strategy:"dedicated",client:i})}}let g=class extends k{get tiles(){return[new $("0/0/0",0,0,0,ot(-1e8,-1e8,1e8,1e8))]}get tileInfo(){return new L({origin:new lt({x:-1e8,y:1e8,spatialReference:this.layer.spatialReference}),size:[512,512],lods:[new q({level:0,scale:1,resolution:390625})],spatialReference:this.layer.spatialReference})}get tileSize(){return this.tileInfo.size[0]}constructor(t){super(t),this.pointOfInterest=null}};o([n({readOnly:!0})],g.prototype,"tiles",null),o([n({readOnly:!0})],g.prototype,"tileInfo",null),o([n({readOnly:!0})],g.prototype,"tileSize",null),o([n({constructOnly:!0})],g.prototype,"layer",void 0),o([n()],g.prototype,"pointOfInterest",void 0),g=o([_("esri.views.interactive.snapping.featureSources.featureServiceSource.FeatureServiceTilesSimple")],g);let u=class extends N(k){get _updateTilesParameters(){return{tiles:this._tilesOfInterest.tiles,tileInfo:this._tilesOfInterest.tileInfo,tileSize:this._tilesOfInterest.tileSize}}get updating(){var t;return((t=this._workerHandle)==null?void 0:t.updating)||this.updatingHandles.updating}get configuration(){const{view:t}=this,e=d(t)?t.type:"2d";return{filter:this._layer.createQuery(),customParameters:this._layer.customParameters,viewType:e}}get availability(){var t;return((t=this._workerHandle)==null?void 0:t.availability)??0}get _layer(){return this.layerSource.layer}constructor(t){super(t),this._workerHandle=null,this._debug=null}initialize(){let t;const e=this.view;if(d(e))switch(e.type){case"2d":this._tilesOfInterest=new h({view:e,layer:this._layer}),t=this._workerHandle=new m;break;case"3d":{const{resourceController:i}=e,s=this._layer,r=e.whenLayerView(s);this._tilesOfInterest=new y({view:e}),t=this._workerHandle=new m({schedule:a=>i.immediate.schedule(a),hasZ:this._layer.hasZ&&(this._layer.returnZ??!0),elevationAlignPointsInFeatures:async(a,l)=>{const c=await r;return C(l),c.elevationAlignPointsInFeatures(a,l)},queryForSymbologySnapping:async(a,l)=>{const c=await r;return C(l),c.queryForSymbologySnapping(a,l)}});const p=new V(null);r.then(a=>p.set(a)),this.addHandles([e.elevationProvider.on("elevation-change",({context:a})=>{const{elevationInfo:l}=s;Z(a,l)&&f(t.notifyElevationSourceChange())}),w(()=>s.elevationInfo,()=>f(t.notifyElevationSourceChange()),S),w(()=>x(p.get(),({processor:a})=>a==null?void 0:a.renderer),()=>f(t.notifySymbologyChange()),S),w(()=>U(p.get(),!1,a=>a.symbologySnappingSupported),a=>f(t.setSymbologySnappingSupported(a)),S),D(()=>{var a;return(a=j(p.get()))==null?void 0:a.layer},["edits","apply-edits","graphic-update"],()=>t.notifySymbologyChange())]);break}}else this._tilesOfInterest=new g({layer:this._layer}),t=this._workerHandle=new m;this.handles.add([T(t)]),f(t.setup({layer:this._layer,spatialReference:this.spatialReference,configuration:this.configuration},null)),this.updatingHandles.add(()=>this._updateTilesParameters,()=>f(t.updateTiles(this._updateTilesParameters,null)),S),this.handles.add([w(()=>this.configuration,i=>f(t.configure(i,null)),z)]),d(e)&&this.handles.add(w(()=>J.FEATURE_SERVICE_SNAPPING_SOURCE_TILE_TREE_SHOW_TILES,i=>{i&&!this._debug?(this._debug=new O({view:e,handle:t}),this.handles.add(T(this._debug),"debug")):!i&&this._debug&&this.handles.remove("debug")},S)),this.handles.add(this.layerSource.layer.on("apply-edits",i=>{f(t.applyEdits(i,null))}))}refresh(){var t;(t=this._workerHandle)==null||t.refresh(null)}async fetchCandidates(t,e){const{coordinateHelper:i,point:s}=t;this._tilesOfInterest.pointOfInterest=i.arrayToPoint(s);const r=this._getGroundElevation;return(await this._workerHandle.fetchCandidates({...t},e)).candidates.map(p=>tt(p,r))}getDebugInfo(t){return this._workerHandle.getDebugInfo(t)}get _getGroundElevation(){return et(this.view)}};o([n({constructOnly:!0})],u.prototype,"spatialReference",void 0),o([n({constructOnly:!0})],u.prototype,"layerSource",void 0),o([n({constructOnly:!0})],u.prototype,"view",void 0),o([n()],u.prototype,"_tilesOfInterest",void 0),o([n({readOnly:!0})],u.prototype,"_updateTilesParameters",null),o([n({readOnly:!0})],u.prototype,"updating",null),o([n({readOnly:!0})],u.prototype,"configuration",null),o([n({readOnly:!0})],u.prototype,"availability",null),o([n()],u.prototype,"_getGroundElevation",null),u=o([_("esri.views.interactive.snapping.featureSources.FeatureServiceSnappingSource")],u);export{u as FeatureServiceSnappingSource};

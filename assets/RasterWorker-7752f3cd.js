import"./geometry-bad16232.js";import{r as a,e as l}from"./typedArrayUtil-ce39e5f4.js";import{D as c}from"./projection-582e07d8.js";import{b as i,d as p,R as f,e as u,F as d,D as S,m as h}from"./vectorFieldUtils-3e325848.js";import{S as y,T as x,p as O,f as N}from"./dataUtils-a1344b8d.js";import{C as J,i as b}from"./utils-df8baad0.js";import{M as g,T as w,$ as B}from"./rasterProjectionHelper-72e1cbe8.js";import{a as m}from"./Extent-680ef92a.js";import"./ArrayPool-5813d861.js";import"./string-7a324480.js";import"./Error-685fdf30.js";import"./Polyline-889037e7.js";import"./cast-8b575ab3.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-e37fe75d.js";import"./typeUtils-700e0da4.js";import"./preload-helper-41c905a7.js";import"./mathUtils-5b623c84.js";import"./vec3-015ca254.js";import"./common-d0b63c2d.js";import"./vec4-c7a19f0d.js";import"./SimpleObservable-6f002ab0.js";import"./mat4-4714ff8c.js";import"./assets-5052bbaa.js";import"./request-fc61835a.js";import"./aaBoundingRect-41e05474.js";import"./Ellipsoid-89682c5e.js";import"./zscale-def794ea.js";import"./Color-ad49dc79.js";import"./colorUtils-639f4d25.js";import"./colorUtils-7641d345.js";import"./enumeration-4ec8d3f9.js";import"./colorRamps-ddfecb23.js";class at{convertVectorFieldData(t){const e=i.fromJSON(t.pixelBlock),o=p(e,t.type);return Promise.resolve(a(o)?o.toJSON():null)}async decode(t){const e=await y(t.data,t.options);return e&&e.toJSON()}symbolize(t){t.pixelBlock=i.fromJSON(t.pixelBlock),t.extent=t.extent?m.fromJSON(t.extent):null;const e=this.symbolizer.symbolize(t);return Promise.resolve(a(e)?e.toJSON():null)}async updateSymbolizer(t){var e;this.symbolizer=x.fromJSON(t.symbolizerJSON),t.histograms&&((e=this.symbolizer)==null?void 0:e.rendererJSON.type)==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)}async updateRasterFunction(t){this.rasterFunction=J(t.rasterFunctionJSON)}async process(t){const e=this.rasterFunction.process({extent:m.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map(o=>a(o)?i.fromJSON(o):null),primaryRasterIds:t.primaryRasterIds});return a(e)?e.toJSON():null}stretch(t){const e=this.symbolizer.simpleStretch(i.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(a(e)&&e.toJSON())}estimateStatisticsHistograms(t){const e=O(i.fromJSON(t.srcPixelBlock));return Promise.resolve(e)}split(t){const e=f(i.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel);return e&&e.forEach((o,r)=>{e.set(r,o==null?void 0:o.toJSON())}),Promise.resolve(e)}async mosaicAndTransform(t){const e=t.srcPixelBlocks.map(n=>n?new i(n):null),o=u(e,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize});let r,s=o;return t.coefs&&(s=d(o,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(r=S(t.destDimension,t.gcsGrid),s=l(h(s,t.isUV?"vector-uv":"vector-magdir",r))),{pixelBlock:s==null?void 0:s.toJSON(),localNorthDirections:r}}async createFlowMesh(t,e){const o={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:r,indexData:s}=await N(t.meshType,t.simulationSettings,o,e.signal);return{result:{vertexBuffer:r.buffer,indexBuffer:s.buffer},transferList:[r.buffer,s.buffer]}}async getProjectionOffsetGrid(t){const e=m.fromJSON(t.projectedExtent),o=m.fromJSON(t.srcBufferExtent);let r=null;t.datumTransformationSteps&&(r=new c({steps:t.datumTransformationSteps})),(t.includeGCSGrid||g(e.spatialReference,o.spatialReference,r))&&await w();const s=t.rasterTransform?b(t.rasterTransform):null;return B({...t,projectedExtent:e,srcBufferExtent:o,datumTransformation:r,rasterTransform:s})}}export{at as default};

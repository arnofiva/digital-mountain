import{u as w,I as f,e as i,a as g,y as h,l as S,t as R}from"./cast-8b575ab3.js";import{U as x}from"./request-fc61835a.js";import{p as N}from"./string-7a324480.js";import{t as j,x as J}from"./typedArrayUtil-ce39e5f4.js";import{a as O,U as _}from"./reactiveUtils-042dd05a.js";import"./ArrayPool-5813d861.js";import{o as b}from"./Extent-680ef92a.js";import{g as v}from"./persistable-63f0629a.js";import{j as $}from"./Collection-47946fa8.js";import"./Error-685fdf30.js";import{v as p}from"./Polyline-889037e7.js";import{A,m as G}from"./projection-582e07d8.js";import{c as U}from"./persistableUrlUtils-1c5d7615.js";var l;let m=l=class extends w($.ofType(p)){constructor(e){super(e)}clone(){return new l(this.items.map(e=>e.clone()))}write(e,s){return this.toJSON(s)}toJSON(e){var r;const s=(r=e==null?void 0:e.layer)==null?void 0:r.spatialReference;return s?this.toArray().map(t=>{if(!s.equals(t.spatialReference)){if(!A(t.spatialReference,s))return e&&e.messages&&e.messages.push(new f("scenefilter:unsupported","Scene filters with incompatible spatial references are not supported",{modification:this,spatialReference:e.layer.spatialReference,context:e})),null;const n=new p;G(t,n,s),t=n}const a=t.toJSON(e);return delete a.spatialReference,a}).filter(t=>t!=null):(e!=null&&e.messages&&e.messages.push(new f("scenefilter:unsupported","Writing Scene filters without context layer is not supported",{modification:this,spatialReference:e.layer.spatialReference,context:e})),this.toArray().map(t=>t.toJSON(e)))}static fromJSON(e,s){const r=new l;return e.forEach(t=>r.add(p.fromJSON(t,s))),r}};m=l=i([g("esri.layers.support.PolygonCollection")],m);const c=m;var u;let o=u=class extends S{constructor(e){super(e),this.spatialRelationship="disjoint",this.geometries=new c,this._geometriesSource=null,this._handles=new R}initialize(){this._handles.add(O(()=>this.geometries,"after-changes",()=>this.geometries=this.geometries,_))}destroy(){this._handles.destroy()}readGeometries(e,s,r){this._geometriesSource={url:U(e,r),context:r}}async loadGeometries(e,s){if(j(this._geometriesSource))return;const{url:r,context:t}=this._geometriesSource,a=await x(r,{responseType:"json",signal:J(s,"signal")}),n=e.toJSON(),d=a.data.map(y=>({...y,spatialReference:n}));this.geometries=c.fromJSON(d,t),this._geometriesSource=null}clone(){return new u({geometries:N(this.geometries),spatialRelationship:this.spatialRelationship})}};i([h({type:["disjoint","contains"],nonNullable:!0,json:{write:!0}})],o.prototype,"spatialRelationship",void 0),i([h({type:c,nonNullable:!0,json:{write:!0}}),v({origins:["web-scene","portal-item"],type:"resource",prefix:"geometries"})],o.prototype,"geometries",void 0),i([b(["web-scene","portal-item"],"geometries")],o.prototype,"readGeometries",null),o=u=i([g("esri.layers.support.SceneFilter")],o);const K=o;export{K as j};

import{l as w}from"./Color-5a385b27.js";import{U as S}from"./request-f01affa1.js";import{s as M,a as L}from"./Error-62cc7aff.js";import{e as R}from"./LRUCache-805da42e.js";import{r as g,t as I}from"./typedArrayUtil-70e1d79e.js";import{j as v}from"./promiseUtils-59dab60c.js";import{c as $}from"./string-7a2f1d87.js";import{i as N,p as T}from"./arcadeOnDemand-5c3ab3f7.js";import{d as j}from"./CIMSymbol-561444b9.js";import"./colorUtils-639f4d25.js";import"./mathUtils-5b623c84.js";import"./vec3-015ca254.js";import"./common-d0b63c2d.js";import"./vec4-c7a19f0d.js";import"./ensureType-249b88cd.js";import"./preload-helper-41c905a7.js";import"./MemCache-a072224a.js";import"./JSONSupport-32b5ad86.js";import"./nextTick-3ee5a785.js";import"./geometry-f89ca072.js";import"./Extent-2ad2c9a9.js";import"./Ellipsoid-89682c5e.js";import"./Polyline-cf51ad23.js";import"./typeUtils-05f9d41d.js";import"./enumeration-504d95a2.js";import"./fieldUtils-e397be4b.js";const P="esri.renderers.support.DictionaryLoader",q={type:"CIMSimpleLineCallout",lineSymbol:{type:"CIMLineSymbol",symbolLayers:[{type:"CIMSolidStroke",width:.5,color:[0,0,0,255]}]}};class lt{constructor(t,o,e){this.config=null,this.fieldMap=null,this.url=null,this._ongoingRequests=new Map,this._symbolCache=new R(100),this._dictionaryPromise=null,this.url=t,this.config=o,this.fieldMap=e}getSymbolFields(){return this._symbolFields}async getSymbolAsync(t,o){let e;this._dictionaryPromise||(this._dictionaryPromise=this.fetchResources(o));try{e=await this._dictionaryPromise}catch(n){if(v(n))return this._dictionaryPromise=null,null}const i={};if(this.fieldMap)for(const n of this._symbolFields){const m=this.fieldMap[n];if(m&&t.attributes[m]!=null){const b=""+t.attributes[m];i[n]=b}else i[n]=""}const r=e==null?void 0:e(i,o);if(!r||typeof r!="string")return null;const l=$(r).toString(),f=this._symbolCache.get(l);if(f)return f.catch(()=>{this._symbolCache.pop(l)}),f;const a=r.split(";"),s=[],c=[];for(const n of a)if(n)if(n.includes("po:")){const m=n.substr(3).split("|");if(m.length===3){const b=m[0],_=m[1];let h=m[2];if(_==="DashTemplate")h=h.split(" ").map(u=>Number(u));else if(_==="Color"){const u=new w(h).toRgba();h=[u[0],u[1],u[2],255*u[3]]}else h=Number(h);c.push({primitiveName:b,propertyName:_,value:h})}}else if(n.includes("|")){for(const m of n.split("|"))if(this._itemNames.has(m)){s.push(m);break}}else this._itemNames.has(n)&&s.push(n);const y=!g(t.geometry)||!t.geometry.hasZ&&t.geometry.type==="point",p=this._cimPartsToCIMSymbol(s,c,y,o);return this._symbolCache.put(l,p,1),p}async fetchResources(t){if(this._dictionaryPromise)return this._dictionaryPromise;if(!this.url)return void M.getLogger(P).error("no valid URL!");const o=S(this.url+"/resources/styles/dictionary-info.json",{responseType:"json",query:{f:"json"},signal:g(t)?t.signal:null}),[{data:e}]=await Promise.all([o,N()]);if(!e)throw this._dictionaryPromise=null,new L("esri.renderers.DictionaryRenderer","Bad dictionary data!");const i=e.expression,r=e.authoringInfo;this._refSymbolUrlTemplate=this.url+"/"+e.cimRefTemplateUrl,this._itemNames=new Set(e.itemsNames),this._symbolFields=r.symbol;const l={};if(this.config){const s=this.config;for(const c in s)l[c]=s[c]}if(r.configuration)for(const s of r.configuration)l.hasOwnProperty(s.name)||(l[s.name]=s.value);const f=[];if(g(t)&&t.fields&&this.fieldMap)for(const s of this._symbolFields){const c=this.fieldMap[s],y=t.fields.filter(p=>p.name===c);y.length>0&&f.push({...y[0],name:s})}const a=T(i,g(t)?t.spatialReference:null,f,l).then(s=>{const c={scale:0};return(y,p)=>{if(I(s))return null;const n=s.repurposeFeature({geometry:null,attributes:y});return c.scale=g(p)?p.scale??void 0:void 0,s.evaluate({$feature:n,$view:c})}}).catch(s=>(M.getLogger(P).error("Creating dictinoary expression failed:",s),null));return this._dictionaryPromise=a,a}async _cimPartsToCIMSymbol(t,o,e,i){const r=new Array(t.length);for(let a=0;a<t.length;a++)r[a]=this._getSymbolPart(t[a],i);const l=await Promise.all(r),f=this.fieldMap;if(f)for(const a of l)C(a,f);return new j({data:this._combineSymbolParts(l,o,e)})}async _getSymbolPart(t,o){if(this._ongoingRequests.has(t))return this._ongoingRequests.get(t).then(r=>r.data);const e=this._refSymbolUrlTemplate.replace(/\{itemName\}/gi,t),i=S(e,{responseType:"json",query:{f:"json"},...o});this._ongoingRequests.set(t,i);try{return(await i).data}catch(r){throw this._ongoingRequests.delete(t),r}}_combineSymbolParts(t,o,e){if(!t||t.length===0)return null;const i={...t[0]};if(t.length>1){i.symbolLayers=[];for(const r of t){const l=r;i.symbolLayers.unshift(...l.symbolLayers)}}return e&&(i.callout=q),{type:"CIMSymbolReference",symbol:i,primitiveOverrides:o}}}function C(d,t){if(!d)return;const o=d.symbolLayers;if(!o)return;let e=o.length;for(;e--;){const i=o[e];i&&i.enable!==!1&&i.type==="CIMVectorMarker"&&F(i,t)}}function F(d,t){const o=d.markerGraphics;if(o)for(const e of o){if(!e)continue;const i=e.symbol;if(i)switch(i.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":C(i,t);break;case"CIMTextSymbol":i.fieldMap=t}}}export{lt as DictionaryLoader};

import{k as K,t as F,r as $}from"./typedArrayUtil-ce39e5f4.js";import{s as R,a as m}from"./Error-685fdf30.js";import{x as f,E as D}from"./promiseUtils-e37fe75d.js";import{i as w}from"./originUtils-1469eeaf.js";import q from"./FeatureLayer-f2f6536e.js";import{d as z}from"./arcgisLayerUrl-81a33ec5.js";import{r as M}from"./fetchService-108a0956.js";import{f as U,p as Y}from"./layerUtils-0c01cb0c.js";import{b as _}from"./Portal-7ecdc9f0.js";import j from"./PortalItem-6549afda.js";import{o as v}from"./jsonContext-0c346c99.js";import{i as c,a as B,c as g,u as n}from"./portalItemUtils-ba37e370.js";import"./string-7a324480.js";import"./multiOriginJSONSupportUtils-c978f4c3.js";import"./preload-helper-41c905a7.js";import"./cast-8b575ab3.js";import"./ArrayPool-5813d861.js";import"./nextTick-3ee5a785.js";import"./PopupTemplate-8ac0cb61.js";import"./Clonable-2b8b60cc.js";import"./Collection-47946fa8.js";import"./Evented-d959ede6.js";import"./SimpleObservable-6f002ab0.js";import"./Extent-680ef92a.js";import"./Ellipsoid-89682c5e.js";import"./fieldUtils-1ecec444.js";import"./arcadeOnDemand-a1bf65ec.js";import"./geometry-bad16232.js";import"./Polyline-889037e7.js";import"./typeUtils-700e0da4.js";import"./enumeration-4ec8d3f9.js";import"./number-134e9f14.js";import"./locale-30120714.js";import"./Identifiable-96150ecf.js";import"./UniqueValueRenderer-3904f4cc.js";import"./symbols-0f3de684.js";import"./CIMSymbol-cdddfd9c.js";import"./Color-ad49dc79.js";import"./colorUtils-639f4d25.js";import"./mathUtils-5b623c84.js";import"./vec3-015ca254.js";import"./common-d0b63c2d.js";import"./vec4-c7a19f0d.js";import"./screenUtils-410d12c0.js";import"./opacityUtils-6b5cbdc2.js";import"./symbolLayerUtils3D-51cc6d75.js";import"./aaBoundingBox-04c58f5a.js";import"./aaBoundingRect-41e05474.js";import"./request-fc61835a.js";import"./persistableUrlUtils-1c5d7615.js";import"./Symbol3DAnchorPosition2D-142c1e90.js";import"./collectionUtils-25147e5f.js";import"./LegendOptions-de492976.js";import"./reactiveUtils-042dd05a.js";import"./diffUtils-0c65d604.js";import"./colorRamps-ddfecb23.js";import"./sizeVariableUtils-d4870b0d.js";import"./visualVariableUtils-a1979e31.js";import"./Graphic-96c42a4d.js";import"./jsonUtils-03437bcd.js";import"./compilerUtils-175b9e40.js";import"./lengthUtils-1d09729e.js";import"./Loadable-695031ac.js";import"./Promise-e757e514.js";import"./PortalGroup-ea788274.js";import"./PortalUser-a1aa49cd.js";import"./jsonUtils-e877a23b.js";import"./styleUtils-305d8f69.js";import"./jsonUtils-b2e5d321.js";import"./DictionaryLoader-1438695d.js";import"./LRUCache-16cff7d8.js";import"./MemCache-1d0e264b.js";import"./deprecate-9828d7d2.js";import"./heatmapUtils-bc76f08e.js";import"./vec4f64-6d0e93be.js";import"./MultiOriginJSONSupport-a1d33be9.js";import"./serviceCapabilitiesUtils-6f645c61.js";import"./FeatureLayerBase-b19f7ee7.js";import"./Field-1bc3a16a.js";import"./fieldType-232282e5.js";import"./HeightModelInfo-42ae0f61.js";import"./OperationalLayer-c3a14c54.js";import"./TimeExtent-d116f9c4.js";import"./ElevationInfo-ad190ee6.js";import"./TimeReference-aeda2bb8.js";import"./datetime-b6333958.js";import"./AttachmentQuery-061e93ef.js";import"./Query-65d38c02.js";import"./RelationshipQuery-0abdb3e2.js";import"./Layer-b29c44e3.js";import"./HandleOwner-f773ce72.js";import"./workers-c3882da6.js";import"./Connection-6bd43370.js";import"./assets-5052bbaa.js";import"./intl-b84fb3c9.js";import"./messages-8a541332.js";import"./editsZScale-eefb35e6.js";import"./queryZScale-bd6bba60.js";import"./zscale-def794ea.js";import"./FeatureSet-cb704b51.js";import"./APIKeyMixin-d7cb7220.js";import"./ArcGISService-7ce81abb.js";import"./BlendLayer-291a2b49.js";import"./mat4f32-60a2394b.js";import"./mat4-4714ff8c.js";import"./CustomParametersMixin-0dbce8f2.js";import"./EditBusLayer-faff46ba.js";import"./FeatureReductionLayer-55e6b2c4.js";import"./labelingInfo-8462538e.js";import"./labelUtils-61dff46d.js";import"./defaultsJSON-59981e75.js";import"./OrderedLayer-f840e564.js";import"./PortalLayer-7f6f61d4.js";import"./asyncUtils-623987a8.js";import"./RefreshableLayer-51d28698.js";import"./ScaleRangeLayer-7ff6c0d3.js";import"./TemporalLayer-12ea8921.js";import"./FeatureTemplate-26b6ba5d.js";import"./FeatureType-474514d1.js";import"./fieldProperties-66b12497.js";import"./FieldsIndex-967913ce.js";import"./versionUtils-f77d2452.js";import"./styleUtils-4d62e921.js";import"./TopFeaturesQuery-3a519c5e.js";import"./popupUtils-7d1e2de5.js";import"./projection-582e07d8.js";const C=R.getLogger("esri.layers.FeatureLayer"),d="Feature Service";function u(t,r){return`Layer (title: ${t.title}, id: ${t.id}) of type '${t.declaredClass}' ${r}`}function E(t,r){if(r.type!==d)throw new m("feature-layer:portal-item-wrong-type",u(t,`should have portal item of type "${d}"`))}async function J(t){if(await t.load(),U(t))throw new m("feature-layer:save",u(t,"using an in-memory source cannot be saved to a portal item"))}function G(t,r){let a=(t.messages??[]).filter(({type:o})=>o==="error").map(({name:o,message:i,details:e})=>new m(o,i,e));if(r!=null&&r.ignoreUnsupported&&(a=a.filter(({name:o})=>o!=="layer:unsupported"&&o!=="symbol:unsupported"&&o!=="symbol-layer:unsupported"&&o!=="property:unsupported"&&o!=="url:unsupported")),a.length>0)throw new m("feature-layer:save","Failed to save feature layer due to unsupported or invalid content. See 'details.errors' for more detailed information",{errors:a})}async function h(t,r,a){"beforeSave"in t&&typeof t.beforeSave=="function"&&await t.beforeSave();const o=t.write({},r);return G(r,a),o}function N(t){const{layer:r,layerJSON:a}=t;return r.isTable?{layers:[],tables:[a]}:{layers:[a],tables:[]}}function b(t){c(t,n.JSAPI),t.typeKeywords&&(t.typeKeywords=t.typeKeywords.filter((r,a,o)=>o.indexOf(r)===a))}function k(t){const r=t.portalItem;if(!r)throw C.error("save: requires the portalItem property to be set"),new m("feature-layer:portal-item-not-set",u(t,"requires the portalItem property to be set"));if(!r.loaded)throw new m("feature-layer:portal-item-not-loaded",u(t,"cannot be saved to a portal item that does not exist or is inaccessible"));E(t,r)}async function O(t,r){return/\/\d+\/?$/.test(t.url??"")?N(r[0]):H(t,r)}async function H(t,r){const{layer:{url:a,customParameters:o,apiKey:i}}=r[0];let e=await t.fetchData("json");e&&e.layers!=null&&e.tables!=null||(e=await Q(e,{url:a??"",customParameters:o,apiKey:i},r.map(p=>p.layer.layerId)));for(const p of r)P(p.layer,p.layerJSON,e);return e}async function Q(t,r,a){var o,i;t||(t={}),(o=t).layers||(o.layers=[]),(i=t).tables||(i.tables=[]);const{url:e,customParameters:p,apiKey:s}=r,{serviceJSON:l,layersJSON:y}=await M(e,{customParameters:p,apiKey:s}),I=x(t.layers,l.layers,a),S=x(t.tables,l.tables,a);t.layers=I.itemResources,t.tables=S.itemResources;const T=[...I.added,...S.added],L=y?[...y.layers,...y.tables]:[];return await V(t,T,e,L),t}function x(t,r,a){const o=K(t,r,(e,p)=>e.id===p.id);t=t.filter(e=>!o.removed.some(p=>p.id===e.id));const i=o.added.map(({id:e})=>({id:e}));return i.forEach(({id:e})=>{t.push({id:e})}),{itemResources:t,added:i.filter(({id:e})=>!a.includes(e))}}async function V(t,r,a,o){const i=r.map(({id:e})=>new q({url:a,layerId:e,sourceJSON:o.find(({id:p})=>p===e)}));await D(i.map(e=>e.load())),i.forEach(e=>{const{layerId:p,loaded:s,defaultPopupTemplate:l}=e;!s||F(l)||P(e,{id:p,popupInfo:l.toJSON()},t)})}function P(t,r,a){t.isTable?A(a.tables,r):A(a.layers,r)}function A(t,r){if(!t)return;const a=t.findIndex(({id:o})=>o===r.id);a===-1?t.push(r):t[a]=r}function W(t){const{portalItem:r}=t;return Y(t)&&!t.dynamicDataSource&&!!(r!=null&&r.loaded)&&r.type===d}async function X(t){if(!(t!=null&&t.length))throw new m("feature-layer-utils-saveall:missing-parameters","'layers' array should contain at least one feature layer");await Promise.all(t.map(o=>o.load()));for(const o of t)if(!W(o))throw new m("feature-layer-utils-saveall:invalid-parameters",`'layers' array should only contain layers or tables in a feature service loaded from 'Feature Service' item. ${u(o,"does not conform")}`,{layer:o});const r=t.map(o=>o.portalItem.id);if(new Set(r).size>1)throw new m("feature-layer-utils-saveall:invalid-parameters","All layers in the 'layers' array should be loaded from the same portal item");const a=t.map(o=>o.layerId);if(new Set(a).size!==a.length)throw new m("feature-layer-utils-saveall:invalid-parameters","'layers' array should contain only one instance each of layer or table in a feature service")}function Z(t,r){var a,o;let i=j.from(r);return i.id&&(i=i.clone(),i.id=null),(a=i).type??(a.type=d),(o=i).portal??(o.portal=_.getDefault()),E(t,i),i}async function tt(t,r){const{url:a,layerId:o,title:i,fullExtent:e,isTable:p}=t,s=z(a),l=$(s)&&s.serverType==="FeatureServer";r.url=l?a:`${a}/${o}`,r.title||(r.title=i),r.extent=null,!p&&$(e)&&(r.extent=await B(e)),g(r,n.METADATA),g(r,n.MULTI_LAYER),c(r,n.SINGLE_LAYER),p&&c(r,n.TABLE),b(r)}async function rt(t,r,a){var i;const o=t.portal;await(o==null?void 0:o.signIn()),await((i=o==null?void 0:o.user)==null?void 0:i.addItem({item:t,data:r,folder:a==null?void 0:a.folder}))}const go=f(ot);async function ot(t,r){await J(t),k(t);const a=t.portalItem,o=v(a),i=await h(t,o,r),e=await O(a,[{layer:t,layerJSON:i}]);return b(a),await a.update({data:e}),w(o),a}const xo=f(async(t,r)=>{await X(t);const a=t[0].portalItem,o=v(a),i=await Promise.all(t.map(p=>h(p,o,r))),e=await O(a,t.map((p,s)=>({layer:p,layerJSON:i[s]})));return b(a),await a.update({data:e}),await Promise.all(t.slice(1).map(p=>p.portalItem.reload())),w(o),a.clone()}),Ao=f(at);async function at(t,r,a){await J(t);const o=Z(t,r),i=v(o),e=N({layer:t,layerJSON:await h(t,i,a)});return await tt(t,o),await rt(o,e,a),t.portalItem=o,w(i),o}export{go as save,xo as saveAll,Ao as saveAs};

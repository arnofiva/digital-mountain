import{l as oe}from"./Color-5a385b27.js";import{z as re,y as Q,v as ie,p as De}from"./colorUtils-7641d345.js";import{C as ee,e as $,y as I,s as _e,l as be,a as Ae}from"./JSONSupport-32b5ad86.js";import{r as G,t as j,e as q}from"./typedArrayUtil-70e1d79e.js";import{a as Te,s as V}from"./Error-62cc7aff.js";import{p as Re}from"./string-7a2f1d87.js";const et=["random","ndvi","ndvi2","ndvi3","elevation","gray","hillshade"],ce=[{id:"aspect_predefined",type:"multipart",colorRamps:[{fromColor:[190,190,190],toColor:[255,45,8]},{fromColor:[255,45,8],toColor:[255,181,61]},{fromColor:[255,181,61],toColor:[255,254,52]},{fromColor:[255,254,52],toColor:[0,251,50]},{fromColor:[0,251,50],toColor:[255,254,52]},{fromColor:[0,253,255],toColor:[0,181,255]},{fromColor:[0,181,255],toColor:[26,35,253]},{fromColor:[26,35,253],toColor:[255,57,251]},{fromColor:[255,57,251],toColor:[255,45,8]}]},{id:"blackToWhite_predefined",fromColor:[0,0,0],toColor:[255,255,255]},{id:"blueBright_predefined",fromColor:[204,204,255],toColor:[0,0,224]},{id:"blueLightToDark_predefined",fromColor:[211,229,232],toColor:[46,100,140]},{id:"blueGreenBright_predefined",fromColor:[203,245,234],toColor:[48,207,146]},{id:"blueGreenLightToDark_predefined",fromColor:[216,242,237],toColor:[21,79,74]},{id:"brownLightToDark_predefined",fromColor:[240,236,170],toColor:[102,72,48]},{id:"brownToBlueGreenDivergingBright_predefined",type:"multipart",colorRamps:[{fromColor:[156,85,31],toColor:[255,255,191]},{fromColor:[255,255,191],toColor:[33,130,145]}]},{id:"brownToBlueGreenDivergingDark_predefined",type:"multipart",colorRamps:[{fromColor:[110,70,45],toColor:[204,204,102]},{fromColor:[204,204,102],toColor:[48,100,102]}]},{id:"coefficientBias_predefined",fromColor:[214,214,255],toColor:[0,57,148]},{id:"coldToHotDiverging_predefined",type:"multipart",colorRamps:[{fromColor:[69,117,181],toColor:[255,255,191]},{fromColor:[255,255,191],toColor:[214,47,39]}]},{id:"conditionNumber_predefined",type:"multipart",colorRamps:[{fromColor:[0,97,0],toColor:[255,255,0]},{fromColor:[255,255,0],toColor:[255,34,0]}]},{id:"cyanToPurple_predefined",type:"multipart",colorRamps:[{fromColor:[0,245,245],toColor:[0,0,245]},{fromColor:[0,0,245],toColor:[245,0,245]}]},{id:"cyanLightToBlueDark_predefined",type:"multipart",colorRamps:[{fromColor:[182,237,240],toColor:[31,131,224]},{fromColor:[31,131,224],toColor:[9,9,145]}]},{id:"distance_predefined",fromColor:[255,200,0],toColor:[0,0,255]},{id:"elevation1_predefined",type:"multipart",colorRamps:[{fromColor:[175,240,233],toColor:[255,255,179]},{fromColor:[255,255,179],toColor:[0,128,64]},{fromColor:[0,128,64],toColor:[252,186,3]},{fromColor:[252,186,3],toColor:[128,0,0]},{fromColor:[120,0,0],toColor:[105,48,13]},{fromColor:[105,48,13],toColor:[171,171,171]},{fromColor:[171,171,171],toColor:[255,252,255]}]},{id:"elevation2_predefined",type:"multipart",colorRamps:[{fromColor:[118,219,211],toColor:[255,255,199]},{fromColor:[255,255,199],toColor:[255,255,128]},{fromColor:[255,255,128],toColor:[217,194,121]},{fromColor:[217,194,121],toColor:[135,96,38]},{fromColor:[135,96,38],toColor:[150,150,181]},{fromColor:[150,150,181],toColor:[181,150,181]},{fromColor:[181,150,181],toColor:[255,252,255]}]},{id:"errors_predefined",fromColor:[255,235,214],toColor:[196,10,10]},{id:"grayLightToDark_predefined",fromColor:[219,219,219],toColor:[69,69,69]},{id:"greenBright_predefined",fromColor:[204,255,204],toColor:[14,204,14]},{id:"greenLightToDark_predefined",fromColor:[220,245,233],toColor:[34,102,51]},{id:"greenToBlue_predefined",type:"multipart",colorRamps:[{fromColor:[32,204,16],toColor:[0,242,242]},{fromColor:[0,242,242],toColor:[2,33,227]}]},{id:"orangeBright_predefined",fromColor:[255,235,204],toColor:[240,118,5]},{id:"orangeLightToDark_predefined",fromColor:[250,233,212],toColor:[171,65,36]},{id:"partialSpectrum_predefined",type:"multipart",colorRamps:[{fromColor:[242,241,162],toColor:[255,255,0]},{fromColor:[255,255,0],toColor:[255,0,0]},{fromColor:[252,3,69],toColor:[176,7,237]},{fromColor:[176,7,237],toColor:[2,29,173]}]},{id:"partialSpectrum1Diverging_predefined",type:"multipart",colorRamps:[{fromColor:[135,38,38],toColor:[240,149,12]},{fromColor:[240,149,12],toColor:[255,255,191]},{fromColor:[255,255,191],toColor:[74,80,181]},{fromColor:[74,80,181],toColor:[39,32,122]}]},{id:"partialSpectrum2Diverging_predefined",type:"multipart",colorRamps:[{fromColor:[115,77,42],toColor:[201,137,52]},{fromColor:[201,137,52],toColor:[255,255,191]},{fromColor:[255,255,191],toColor:[91,63,176]},{fromColor:[91,63,176],toColor:[81,13,97]}]},{id:"pinkToYellowGreenDivergingBright_predefined",type:"multipart",colorRamps:[{fromColor:[158,30,113],toColor:[255,255,191]},{fromColor:[255,255,191],toColor:[99,110,45]}]},{id:"pinkToYellowGreenDivergingDark_predefined",type:"multipart",colorRamps:[{fromColor:[97,47,73],toColor:[204,204,102]},{fromColor:[204,204,102],toColor:[22,59,15]}]},{id:"precipitation_predefined",type:"multipart",colorRamps:[{fromColor:[194,82,60],toColor:[237,161,19]},{fromColor:[237,161,19],toColor:[255,255,0]},{fromColor:[255,255,0],toColor:[0,219,0]},{fromColor:[0,219,0],toColor:[32,153,143]},{fromColor:[32,153,143],toColor:[11,44,122]}]},{id:"prediction_predefined",type:"multipart",colorRamps:[{fromColor:[40,146,199],toColor:[250,250,100]},{fromColor:[250,250,100],toColor:[232,16,20]}]},{id:"purpleBright_predefined",fromColor:[255,204,255],toColor:[199,0,199]},{id:"purpleToGreenDivergingBright_predefined",type:"multipart",colorRamps:[{fromColor:[77,32,150],toColor:[255,255,191]},{fromColor:[255,255,191],toColor:[20,122,11]}]},{id:"purpleToGreenDivergingDark_predefined",type:"multipart",colorRamps:[{fromColor:[67,14,89],toColor:[204,204,102]},{fromColor:[204,204,102],toColor:[24,79,15]}]},{id:"purpleBlueBright_predefined",fromColor:[223,184,230],toColor:[112,12,242]},{id:"purpleBlueLightToDark_predefined",fromColor:[229,213,242],toColor:[93,44,112]},{id:"purpleRedBright_predefined",fromColor:[255,204,225],toColor:[199,0,99]},{id:"purpleRedLightToDark_predefined",fromColor:[250,215,246],toColor:[143,17,57]},{id:"redBright_predefined",fromColor:[255,204,204],toColor:[219,0,0]},{id:"redLightToDark_predefined",fromColor:[255,224,224],toColor:[143,10,10]},{id:"redToBlueDivergingBright_predefined",type:"multipart",colorRamps:[{fromColor:[196,69,57],toColor:[255,255,191]},{fromColor:[255,255,191],toColor:[48,95,207]}]},{id:"redToBlueDivergingDark_predefined",type:"multipart",colorRamps:[{fromColor:[107,13,13],toColor:[204,204,102]},{fromColor:[204,204,102],toColor:[13,53,97]}]},{id:"redToGreen_predefined",type:"multipart",colorRamps:[{fromColor:[245,0,0],toColor:[245,245,0]},{fromColor:[245,245,0],toColor:[0,245,0]}]},{id:"redToGreenDivergingBright_predefined",type:"multipart",colorRamps:[{fromColor:[186,20,20],toColor:[255,255,191]},{fromColor:[255,255,191],toColor:[54,145,33]}]},{id:"redToGreenDivergingDark_predefined",type:"multipart",colorRamps:[{fromColor:[97,21,13],toColor:[204,204,102]},{fromColor:[204,204,102],toColor:[16,69,16]}]},{id:"slope_predefined",type:"multipart",colorRamps:[{fromColor:[56,168,0],toColor:[255,255,0]},{fromColor:[255,255,0],toColor:[255,0,0]}]},{id:"spectrumFullBright_predefined",type:"multipart",colorRamps:[{fromColor:[255,0,0],toColor:[255,255,0]},{fromColor:[255,255,0],toColor:[0,255,255]},{fromColor:[0,255,255],toColor:[0,0,255]}]},{id:"spectrumFullDark_predefined",type:"multipart",colorRamps:[{fromColor:[153,0,0],toColor:[153,153,0]},{fromColor:[153,153,0],toColor:[0,153,153]},{fromColor:[0,153,153],toColor:[0,0,153]}]},{id:"spectrumFullLight_predefined",type:"multipart",colorRamps:[{fromColor:[255,153,153],toColor:[255,255,153]},{fromColor:[255,255,153],toColor:[153,255,255]},{fromColor:[153,255,255],toColor:[153,153,255]}]},{id:"surface_predefined",type:"multipart",colorRamps:[{fromColor:[112,153,89],toColor:[242,238,162]},{fromColor:[242,238,162],toColor:[242,206,133]},{fromColor:[242,206,133],toColor:[194,140,124]},{fromColor:[194,140,124],toColor:[255,242,255]}]},{id:"temperature_predefined",type:"multipart",colorRamps:[{fromColor:[255,252,255],toColor:[255,0,255]},{fromColor:[255,0,255],toColor:[0,0,255]},{fromColor:[0,0,255],toColor:[0,255,255]},{fromColor:[0,255,255],toColor:[0,255,0]},{fromColor:[0,255,0],toColor:[255,255,0]},{fromColor:[255,255,0],toColor:[255,128,0]},{fromColor:[255,128,0],toColor:[128,0,0]}]},{id:"whiteToBlack_predefined",fromColor:[255,255,255],toColor:[0,0,0]},{id:"yellowToDarkRed_predefined",type:"multipart",colorRamps:[{fromColor:[255,255,128],toColor:[242,167,46]},{fromColor:[242,167,46],toColor:[107,0,0]}]},{id:"yellowToGreenToDarkBlue_predefined",type:"multipart",colorRamps:[{fromColor:[255,255,128],toColor:[56,224,9]},{fromColor:[56,224,9],toColor:[26,147,171]},{fromColor:[26,147,171],toColor:[12,16,120]}]},{id:"yellowToRed_predefined",fromColor:[245,245,0],toColor:[255,0,0]},{id:"yellowGreenBright_predefined",fromColor:[236,252,204],toColor:[157,204,16]},{id:"yellowGreenLightToDark_predefined",fromColor:[215,240,175],toColor:[96,107,45]}],ge={aspect_predefined:"Aspect",blackToWhite_predefined:"Black to White",blueBright_predefined:"Blue Bright",blueLightToDark_predefined:"Blue Light to Dark",blueGreenBright_predefined:"Blue-Green Bright",blueGreenLightToDark_predefined:"Blue-Green Light to Dark",brownLightToDark_predefined:"Brown Light to Dark",brownToBlueGreenDivergingBright_predefined:"Brown to Blue Green Diverging, Bright",brownToBlueGreenDivergingDark_predefined:"Brown to Blue Green Diverging, Dark",coefficientBias_predefined:"Coefficient Bias",coldToHotDiverging_predefined:"Cold to Hot Diverging",conditionNumber_predefined:"Condition Number",cyanToPurple_predefined:"Cyan to Purple",cyanLightToBlueDark_predefined:"Cyan-Light to Blue-Dark",distance_predefined:"Distance",elevation1_predefined:"Elevation #1",elevation2_predefined:"Elevation #2",errors_predefined:"Errors",grayLightToDark_predefined:"Gray Light to Dark",greenBright_predefined:"Green Bright",greenLightToDark_predefined:"Green Light to Dark",greenToBlue_predefined:"Green to Blue",orangeBright_predefined:"Orange Bright",orangeLightToDark_predefined:"Orange Light to Dark",partialSpectrum_predefined:"Partial Spectrum",partialSpectrum1Diverging_predefined:"Partial Spectrum 1 Diverging",partialSpectrum2Diverging_predefined:"Partial Spectrum 2 Diverging",pinkToYellowGreenDivergingBright_predefined:"Pink to YellowGreen Diverging, Bright",pinkToYellowGreenDivergingDark_predefined:"Pink to YellowGreen Diverging, Dark",precipitation_predefined:"Precipitation",prediction_predefined:"Prediction",purpleBright_predefined:"Purple Bright",purpleToGreenDivergingBright_predefined:"Purple to Green Diverging, Bright",purpleToGreenDivergingDark_predefined:"Purple to Green Diverging, Dark",purpleBlueBright_predefined:"Purple-Blue Bright",purpleBlueLightToDark_predefined:"Purple-Blue Light to Dark",purpleRedBright_predefined:"Purple-Red Bright",purpleRedLightToDark_predefined:"Purple-Red Light to Dark",redBright_predefined:"Red Bright",redLightToDark_predefined:"Red Light to Dark",redToBlueDivergingBright_predefined:"Red to Blue Diverging, Bright",redToBlueDivergingDark_predefined:"Red to Blue Diverging, Dark",redToGreen_predefined:"Red to Green",redToGreenDivergingBright_predefined:"Red to Green Diverging, Bright",redToGreenDivergingDark_predefined:"Red to Green Diverging, Dark",slope_predefined:"Slope",spectrumFullBright_predefined:"Spectrum-Full Bright",spectrumFullDark_predefined:"Spectrum-Full Dark",spectrumFullLight_predefined:"Spectrum-Full Light",surface_predefined:"Surface",temperature_predefined:"Temperature",whiteToBlack_predefined:"White to Black",yellowToDarkRed_predefined:"Yellow to Dark Red",yellowToGreenToDarkBlue_predefined:"Yellow to Green to Dark Blue",yellowToRed_predefined:"Yellow to Red",yellowGreenBright_predefined:"Yellow-Green Bright",yellowGreenLightToDark_predefined:"Yellow-Green Light to Dark"},Me=new ee({Aspect:"aspect","Black to White":"black-to-white","Blue Bright":"blue-bright","Blue Light to Dark":"blue-light-to-dark","Blue-Green Bright":"blue-green-bright","Blue-Green Light to Dark":"blue-green-light-to-dark","Brown Light to Dark":"brown-light-to-dark","Brown to Blue Green Diverging, Bright":"brown-to-blue-green-diverging-right","Brown to Blue Green Diverging, Dark":"brown-to-blue-green-diverging-dark","Coefficient Bias":"coefficient-bias","Cold to Hot Diverging":"cold-to-hot-diverging","Condition Number":"condition-number","Cyan to Purple":"cyan-to-purple","Cyan-Light to Blue-Dark":"cyan-light-to-blue-dark",Distance:"distance","Elevation #1":"elevation1","Elevation #2":"elevation2",Errors:"errors","Gray Light to Dark":"gray-light-to-dark","Green Bright":"green-bright","Green Light to Dark":"green-light-to-dark","Green to Blue":"green-to-blue","Orange Bright":"orange-bright","Orange Light to Dark":"orange-light-to-dark","Partial Spectrum":"partial-spectrum","Partial Spectrum 1 Diverging":"partial-spectrum-1-diverging","Partial Spectrum 2 Diverging":"partial-spectrum-2-diverging","Pink to YellowGreen Diverging, Bright":"pink-to-yellow-green-diverging-bright","Pink to YellowGreen Diverging, Dark":"pink-to-yellow-green-diverging-dark",Precipitation:"precipitation",Prediction:"prediction","urple Bright":"purple-bright","Purple to Green Diverging, Bright":"purple-to-green-diverging-bright","Purple to Green Diverging, Dark":"purple-to-green-diverging-dark","Purple-Blue Bright":"purple-blue-bright","Purple-Blue Light to Dark":"purple-blue-light-to-dark","Purple-Red Bright":"purple-red-bright","Purple-Red Light to Dark":"purple-red-light-to-dark","Red Bright":"red-bright","Red Light to Dark":"red-light-to-dark","Red to Blue Diverging, Bright":"red-to-blue-diverging-bright","Red to Blue Diverging, Dark":"red-to-blue-diverging-dark","Red to Green":"red-to-green","Red to Green Diverging, Bright":"red-to-green-diverging-bright","Red to Green Diverging, Dark":"red-to-green-diverging-dark",Slope:"slope","Spectrum-Full Bright":"spectrum-full-bright","Spectrum-Full Dark":"spectrum-full-dark","Spectrum-Full Light":"spectrum-full-light",Surface:"surface",Temperature:"temperature","White to Black":"white-to-black","Yellow to Dark Red":"yellow-to-dark-red","Yellow to Green to Dark Blue":"yellow-to-green-to-dark-blue","Yellow to Red":"yellow-to-red","Yellow-Green Bright":"yellow-green-bright","Yellow-Green Light to Dark":"yellow-green-light-to-dark"});function H(e,t){if(!e||!t||e.length!==t.length)return!1;for(let o=0;o<e.length;o++)if(e[o]>t[o]+2||e[o]<t[o]-2)return!1;return!0}function Ge(e,t){if(!e)return;const o=t||ce;let i=null;return e.type==="algorithmic"?o.some(n=>{if(H(e.fromColor.toRgb(),n.fromColor)&&H(e.toColor.toRgb(),n.toColor))return i=n.id,!0}):e.type==="multipart"&&o.some(n=>{const r=e.colorRamps,l=n.colorRamps;if(r&&l&&r.length===l.length&&!l.some((s,p)=>{if(!H(r[p].fromColor.toRgb(),new oe(s.fromColor).toRgb())||!H(r[p].toColor.toRgb(),new oe(s.toColor).toRgb()))return!0})){if(i)return!0;i=n.id}}),i}function Pe(e){const t=Ge(e);return t?ge[t]:null}function tt(e){var n;const t=Me.toJSON(e),o=(n=Object.entries(ge).find(r=>r[1]===t))==null?void 0:n[0],i=ce.find(r=>r.id===o);return i?i.colorRamps?{type:"multipart",colorRamps:i.colorRamps.map(r=>({type:"algorithmic",algorithm:"esriCIELabAlgorithm",fromColor:r.fromColor,toColor:r.toColor}))}:{type:"algorithmic",algorithm:"esriCIELabAlgorithm",fromColor:i.fromColor,toColor:i.toColor}:null}function me(e){const t=(e=e||{}).numColors||256,o=e.distanceOffset||0,i=e.isCustomInterval!=null?e.isCustomInterval:e.distanceInterval!==null&&e.distanceInterval!==1/(t-1),n=e.distanceInterval||1/(t-1);return{...e,numColors:t,distanceOffset:o,interpolateAlpha:!!e.interpolateAlpha,distanceInterval:n,isCustomInterval:i,weights:e.weights}}function Le(e,t,o){const{numColors:i,distanceOffset:n,distanceInterval:r,isCustomInterval:l}=o,s=e.s===0,p=t.s===0;let f=e.h,a=t.h;s&&!p?f=a:p&&!s&&(t={...t,h:f},a=f);let d,c=Math.abs(a-f);const h=360;c<h/2?d=(a-f)*r:(c=h-c,d=f>a?c*r:-c*r);const g=(t.s-e.s)*r,u=(t.v-e.v)*r;let{s:m,v:C}=e,y=f;if(n){const k=n/r;y=(y+k*d+h)%h,m+=k*g,C+=k*u}const w=[];for(let k=0;k<i-1;k++)w.push({h:y,s:m,v:C}),y=(y+d+h)%h,m+=g,C+=u;return w.push(l?{h:y,s:m,v:C}:t),w}function Se(e,t,o){const{numColors:i,distanceOffset:n,distanceInterval:r,isCustomInterval:l}=o;let{l:s,a:p,b:f}=e;const a=(t.l-s)*r,d=(t.a-p)*r,c=(t.b-f)*r,h=[];if(n){const g=n/r;s+=g*a,p+=g*d,f+=g*c}for(let g=0;g<i-1;g++)h.push({l:s,a:p,b:f}),s+=a,p+=d,f+=c;return h.push(l?{l:s,a:p,b:f}:t),h}function $e(e,t,o){const{numColors:i,distanceOffset:n,distanceInterval:r,isCustomInterval:l}=o,s=e.h,p=t.h,f=2*Math.PI;let a;if(s<=p){const y=p-s,w=p-s-f;a=Math.abs(w)<Math.abs(y)?w:y}else{const y=p+f-s,w=p-s;a=Math.abs(w)<Math.abs(y)?w:y}const d=a*r,c=(t.l-e.l)*r,h=(t.c-e.c)*r;let{l:g,c:u,h:m}=e;if(n){const y=n/r;g+=y*c,u+=y*h,m=(m+y*d+f)%f}const C=[];for(let y=0;y<i-1;y++)C.push({l:g,c:u,h:m}),g+=c,u+=h,m=(m+d+f)%f;return C.push(l?{l:g,c:u,h:m}:t),C}function Ce(e,t){let{fromColor:o,toColor:i}=e;o.length===3&&(o=o.concat([255])),i.length===3&&(i=i.concat([255]));const n=e.algorithm||"esriCIELabAlgorithm",r=me(t),{numColors:l,distanceOffset:s,isCustomInterval:p,interpolateAlpha:f}=r;if(l===1&&s===0)return[o];if(l===2&&s===0&&!p)return[o,i];const a={r:o[0],g:o[1],b:o[2]},d={r:i[0],g:i[1],b:i[2]},c=n==="esriCIELabAlgorithm"?Se(re(a),re(d),r):n==="esriHSVAlgorithm"?Le(Q(a),Q(d),r):$e(ie(a),ie(d),r),h=[],g=o[3]??255,u=((i[3]??255)-g)/(l-1);for(let m=0;m<l;m++){const{r:C,g:y,b:w}=De(c[m]),k=f?Math.round(g+u*m):255;h.push([C,y,w,k])}return h}function Ue(e,t){const{numColors:o,interpolateAlpha:i}=me(t);let n=t==null?void 0:t.weights;const{colorRamps:r}=e;if(n){const c=n.reduce((h,g)=>h+g);n=n.map(h=>h/c)}else{n=[];for(let c=0;c<r.length;c++)n[c]=1/r.length}const l=[];let s=0,p=0;const f=1/(o-1);let a=!1;for(let c=0;c<r.length;c++){let h=a?0:s*f-p,g=c===r.length-1?o-1-s:(n[c]-h)/f;if(a=Math.ceil(g)===g,g=Math.ceil(g),g===0)continue;h/=n[c];const u=Ce(r[c],{numColors:g,interpolateAlpha:i,distanceOffset:h,distanceInterval:f/n[c]});s+=u.length,l.push(...u),p+=n[c]}const d=[...r[r.length-1].toColor];return d.length===3&&d.push(255),l.push(d),l}function Ie(e,t){const o="toJSON"in e?e.toJSON():e;return o.type==="multipart"?Ue(o,t):Ce(o,t)}function ot(e,t){const o=Ie(e,t),i=t==null?void 0:t.interpolateAlpha;return o.forEach((n,r)=>{n.unshift(r),i||n.pop()}),o}function rt(e){const t=Pe(e);if(e){if(e.type==="algorithmic")return{...le(e),Name:t};if(e.colorRamps){const o=e.colorRamps.map(le);return{type:"MultiPartColorRamp",NumColorRamps:o.length,ArrayOfColorRamp:o,Name:t}}}}function le(e){var t;if(e)return{Algorithm:((t=e.toJSON())==null?void 0:t.Algorithm)||"esriHSVAlgorithm",type:"AlgorithmicColorRamp",FromColor:ne(e.fromColor),ToColor:ne(e.toColor)}}function ne(e){const t=Q(e);return{type:"HsvColor",Hue:t.h,Saturation:t.s,Value:t.v,AlphaValue:255}}function it(e){const t=e.reverse().map(o=>{const i=o.toString(16);return i.length<2?"0"+i:i});return 4294967295&Number.parseInt(t.join(""),16)}const lt=new ee({none:"none",standardDeviation:"standard-deviation",histogramEqualization:"histogram-equalization",minMax:"min-max",percentClip:"percent-clip",sigmoid:"sigmoid"}),nt={0:"none",3:"standardDeviation",4:"histogramEqualization",5:"minMax",6:"percentClip",9:"sigmoid"};let se=class{constructor(t=null,o=null,i=null){this.minValue=t,this.maxValue=o,this.noDataValue=i}};const Ee=9999999e31,Fe=2e-7,Ne={u1:[0,1],u2:[0,3],u4:[0,15],u8:[0,255],s8:[-128,127],u16:[0,65535],s16:[-32768,32767],u32:[0,4294967295],s32:[-2147483648,2147483647],f32:[-34028234663852886e22,34028234663852886e22],f64:[-Number.MAX_VALUE,Number.MAX_VALUE]};function X(e){return Ne[e]??[-34028234663852886e22,34028234663852886e22]}function at(e,t,o){if(e.depthCount&&e.depthCount>1)return;const{pixels:i,statistics:n,pixelType:r}=e,l=i[0].length,s=e.bandMasks??[],p=e.mask??new Uint8Array(l).fill(255),f=r==="f32"||r==="f64",a=X(r);let d=!1;for(let c=0;c<i.length;c++){const h=typeof t=="number"?t:t[c];if(h==null)continue;const g=(n==null?void 0:n[c].minValue)??a[0],u=(n==null?void 0:n[c].maxValue)??a[1];if(g>h+Number.EPSILON||u<h-Number.EPSILON)continue;const m=s[c]||new Uint8Array(l).fill(255),C=i[c],y=o==null?void 0:o.customFloatTolerance;if(f&&y!==0){let w=y;w||(w=Math.abs(h)>=Ee?Fe*Math.abs(h):r==="f32"?2**-23:Number.EPSILON);for(let k=0;k<C.length;k++)m[k]&&Math.abs(C[k]-h)<w&&(C[k]=0,m[k]=0,p[k]=0,d=!0)}else for(let w=0;w<C.length;w++)m[w]&&C[w]===h&&(C[w]=0,m[w]=0,p[w]=0,d=!0);s[c]=m}d&&(e.bandMasks=s,e.mask=p),d&&"updateStatistics"in e&&e.updateStatistics()}var F;let L=F=class extends be{static createEmptyBand(e,t){return new(F.getPixelArrayConstructor(e))(t)}static getPixelArrayConstructor(e){let t;switch(e){case"u1":case"u2":case"u4":case"u8":t=Uint8Array;break;case"u16":t=Uint16Array;break;case"u32":t=Uint32Array;break;case"s8":t=Int8Array;break;case"s16":t=Int16Array;break;case"s32":t=Int32Array;break;case"f32":case"c64":case"c128":case"unknown":t=Float32Array;break;case"f64":t=Float64Array}return t}constructor(e){super(e),this.width=null,this.height=null,this.pixelType="f32",this.validPixelCount=null,this.mask=null,this.maskIsAlpha=!1,this.statistics=null,this.depthCount=1}castPixelType(e){if(!e)return"f32";let t=e.toLowerCase();return["u1","u2","u4"].includes(t)?t="u8":["unknown","u8","s8","u16","s16","u32","s32","f32","f64"].includes(t)||(t="f32"),t}getPlaneCount(){var e;return(e=this.pixels)==null?void 0:e.length}addData(e){if(!e.pixels||e.pixels.length!==this.width*this.height)throw new Te("pixelblock:invalid-or-missing-pixels","add data requires valid pixels array that has same length defined by pixel block width * height");this.pixels||(this.pixels=[]),this.statistics||(this.statistics=[]),this.pixels.push(e.pixels),this.statistics.push(e.statistics??new se)}getAsRGBA(){const e=new ArrayBuffer(this.width*this.height*4);switch(this.pixelType){case"s8":case"s16":case"u16":case"s32":case"u32":case"f32":case"f64":this._fillFromNon8Bit(e);break;default:this._fillFrom8Bit(e)}return new Uint8ClampedArray(e)}getAsRGBAFloat(){const e=new Float32Array(this.width*this.height*4);return this._fillFrom32Bit(e),e}updateStatistics(){if(!this.pixels)return;this.statistics=this.pixels.map(o=>this._calculateBandStatistics(o,this.mask));const e=this.mask;let t=0;if(G(e))for(let o=0;o<e.length;o++)e[o]&&t++;else t=this.width*this.height;this.validPixelCount=t}clamp(e){if(!e||e==="f64"||e==="f32"||!this.pixels)return;const[t,o]=X(e),i=this.pixels,n=this.width*this.height,r=i.length;let l,s,p;const f=[];for(let a=0;a<r;a++){p=F.createEmptyBand(e,n),l=i[a];for(let d=0;d<n;d++)s=l[d],p[d]=s>o?o:s<t?t:s;f.push(p)}this.pixels=f,this.pixelType=e}extractBands(e){const{pixels:t,statistics:o}=this;if(j(e)||e.length===0||!t||t.length===0)return this;const i=t.length,n=e.some(l=>l>=t.length),r=i===e.length&&!e.some((l,s)=>l!==s);return n||r?this:new F({pixelType:this.pixelType,width:this.width,height:this.height,mask:this.mask,validPixelCount:this.validPixelCount,maskIsAlpha:this.maskIsAlpha,pixels:e.map(l=>t[l]),statistics:o&&e.map(l=>o[l])})}clone(){const e=new F({width:this.width,height:this.height,pixelType:this.pixelType,maskIsAlpha:this.maskIsAlpha,validPixelCount:this.validPixelCount});let t;G(this.mask)&&(this.mask instanceof Uint8Array?e.mask=new Uint8Array(this.mask):e.mask=this.mask.slice(0));const o=F.getPixelArrayConstructor(this.pixelType);if(this.pixels&&this.pixels.length>0){e.pixels=[];const i=!!this.pixels[0].slice;for(t=0;t<this.pixels.length;t++)e.pixels[t]=i?this.pixels[t].slice(0,this.pixels[t].length):new o(this.pixels[t])}if(this.statistics)for(e.statistics=[],t=0;t<this.statistics.length;t++)e.statistics[t]=Re(this.statistics[t]);return e}_fillFrom8Bit(e){const{mask:t,maskIsAlpha:o,pixels:i}=this;if(!e||!i||!i.length)return void V.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");let n,r,l,s;n=r=l=i[0],i.length>=3?(r=i[1],l=i[2]):i.length===2&&(r=i[1]);const p=new Uint32Array(e),f=this.width*this.height;if(n.length===f)if(G(t)&&t.length===f)if(o)for(s=0;s<f;s++)t[s]&&(p[s]=t[s]<<24|l[s]<<16|r[s]<<8|n[s]);else for(s=0;s<f;s++)t[s]&&(p[s]=255<<24|l[s]<<16|r[s]<<8|n[s]);else for(s=0;s<f;s++)p[s]=255<<24|l[s]<<16|r[s]<<8|n[s];else V.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.")}_fillFromNon8Bit(e){const{pixels:t,mask:o,statistics:i}=this;if(!e||!t||!t.length)return void V.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");const n=this.pixelType;let r=1,l=0,s=1;if(i&&i.length>0){for(const u of i)if(u.minValue!=null&&(l=Math.min(l,u.minValue)),u.maxValue!=null&&u.minValue!=null){const m=u.maxValue-u.minValue;s=Math.max(s,m)}r=255/s}else{let u=255;n==="s8"?(l=-128,u=127):n==="u16"?u=65535:n==="s16"?(l=-32768,u=32767):n==="u32"?u=4294967295:n==="s32"?(l=-2147483648,u=2147483647):n==="f32"?(l=-34e38,u=34e38):n==="f64"&&(l=-Number.MAX_VALUE,u=Number.MAX_VALUE),r=255/(u-l)}const p=new Uint32Array(e),f=this.width*this.height;let a,d,c,h,g;if(a=d=c=t[0],a.length!==f)return V.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.");if(t.length>=2)if(d=t[1],t.length>=3&&(c=t[2]),G(o)&&o.length===f)for(h=0;h<f;h++)o[h]&&(p[h]=255<<24|(c[h]-l)*r<<16|(d[h]-l)*r<<8|(a[h]-l)*r);else for(h=0;h<f;h++)p[h]=255<<24|(c[h]-l)*r<<16|(d[h]-l)*r<<8|(a[h]-l)*r;else if(G(o)&&o.length===f)for(h=0;h<f;h++)g=(a[h]-l)*r,o[h]&&(p[h]=255<<24|g<<16|g<<8|g);else for(h=0;h<f;h++)g=(a[h]-l)*r,p[h]=255<<24|g<<16|g<<8|g}_fillFrom32Bit(e){const{pixels:t,mask:o}=this;if(!e||!t||!t.length)return V.getLogger(this.declaredClass).error("getAsRGBAFloat()","Unable to convert to RGBA. The input pixel block is empty.");let i,n,r,l;i=n=r=t[0],t.length>=3?(n=t[1],r=t[2]):t.length===2&&(n=t[1]);const s=this.width*this.height;if(i.length!==s)return V.getLogger(this.declaredClass).error("getAsRGBAFloat()","Unable to convert to RGBA. The pixelblock is invalid.");let p=0;if(G(o)&&o.length===s)for(l=0;l<s;l++)e[p++]=i[l],e[p++]=n[l],e[p++]=r[l],e[p++]=1&o[l];else for(l=0;l<s;l++)e[p++]=i[l],e[p++]=n[l],e[p++]=r[l],e[p++]=1}_calculateBandStatistics(e,t){let o=1/0,i=-1/0;const n=e.length;let r,l=0;if(G(t))for(r=0;r<n;r++)t[r]&&(l=e[r],o=l<o?l:o,i=l>i?l:i);else for(r=0;r<n;r++)l=e[r],o=l<o?l:o,i=l>i?l:i;return new se(o,i)}};$([I({json:{write:!0}})],L.prototype,"width",void 0),$([I({json:{write:!0}})],L.prototype,"height",void 0),$([I({json:{write:!0}})],L.prototype,"pixelType",void 0),$([_e("pixelType")],L.prototype,"castPixelType",null),$([I({json:{write:!0}})],L.prototype,"validPixelCount",void 0),$([I({json:{write:!0}})],L.prototype,"mask",void 0),$([I({json:{write:!0}})],L.prototype,"maskIsAlpha",void 0),$([I({json:{write:!0}})],L.prototype,"pixels",void 0),$([I({json:{write:!0}})],L.prototype,"statistics",void 0),$([I({json:{write:!0}})],L.prototype,"depthCount",void 0),$([I({json:{write:!0}})],L.prototype,"noDataValues",void 0),$([I({json:{write:!0}})],L.prototype,"bandMasks",void 0),L=F=$([Ae("esri.layers.support.PixelBlock")],L);const T=L;var ae,he;(function(e){e[e.matchAny=0]="matchAny",e[e.matchAll=1]="matchAll"})(ae||(ae={})),function(e){e[e.bestMatch=0]="bestMatch",e[e.fail=1]="fail"}(he||(he={}));const ht=6;function R(e){return G(e)&&e.declaredClass==="esri.layers.support.PixelBlock"&&e.pixels&&e.pixels.length>0}function pt(e,t){if(!(t!=null&&t.length)||!R(e))return e;const o=e.pixels.length;return t&&t.some(i=>i>=o)||o===1&&t.length===1&&t[0]===0?e:o!==t.length||t.some((i,n)=>i!==n)?new T({pixelType:e.pixelType,width:e.width,height:e.height,mask:e.mask,validPixelCount:e.validPixelCount,maskIsAlpha:e.maskIsAlpha,pixels:t.map(i=>e.pixels[i]),statistics:e.statistics&&t.map(i=>e.statistics[i])}):e}function ft(e){if(!(e!=null&&e.length)||e.some(a=>!R(a)))return null;if(e.length===1)return G(e[0])?e[0].clone():null;const t=e,{width:o,height:i,pixelType:n}=t[0];if(t.some(a=>a.width!==o||a.height!==i))return null;const r=t.map(({mask:a})=>a).filter(a=>a!=null);let l=null;r.length&&(l=new Uint8Array(o*i),l.set(r[0]),r.length>1&&ke(r.slice(1),l));const s=[];t.forEach(({pixels:a})=>s.push(...a));const p=t.map(({statistics:a})=>a).filter(a=>a==null?void 0:a.length),f=[];return p.forEach(a=>f.push(...a)),new T({pixelType:n,width:o,height:i,mask:l,pixels:s,statistics:f.length?f:null})}function dt(e){if(!e)return;const t=e.colormap;if(!t||t.length===0)return;const o=t.sort((d,c)=>d[0]-c[0]);let i=0;o[0][0]<0&&(i=o[0][0]);const n=Math.max(256,o[o.length-1][0]-i+1),r=new Uint8Array(4*n),l=[];let s,p=0,f=0;const a=o[0].length===5;if(n>65536)return o.forEach(d=>{l[d[0]-i]=a?d.slice(1):d.slice(1).concat([255])}),{indexed2DColormap:l,offset:i,alphaSpecified:a};if(e.fillUnspecified)for(s=o[f],p=s[0]-i;p<n;p++)r[4*p]=s[1],r[4*p+1]=s[2],r[4*p+2]=s[3],r[4*p+3]=a?s[4]:255,p===s[0]-i&&(s=f===o.length-1?s:o[++f]);else for(p=0;p<o.length;p++)s=o[p],f=4*(s[0]-i),r[f]=s[1],r[f+1]=s[2],r[f+2]=s[3],r[f+3]=a?s[4]:255;return{indexedColormap:r,offset:i,alphaSpecified:a}}function ut(e,t){if(!R(e)||!t||!t.indexedColormap&&!t.indexed2DColormap)return e;const o=e.clone(),i=o.pixels;let n=o.mask;const r=o.width*o.height;if(i.length!==1)return e;const{indexedColormap:l,indexed2DColormap:s,offset:p,alphaSpecified:f}=t;let a=0;const d=i[0],c=new Uint8Array(d.length),h=new Uint8Array(d.length),g=new Uint8Array(d.length);let u,m=0;if(l){const C=l.length-1;if(G(n))for(a=0;a<r;a++)n[a]&&(m=4*(d[a]-p),m<p||m>C?n[a]=0:(c[a]=l[m],h[a]=l[m+1],g[a]=l[m+2],n[a]=l[m+3]));else{for(n=new Uint8Array(r),a=0;a<r;a++)m=4*(d[a]-p),m<p||m>C?n[a]=0:(c[a]=l[m],h[a]=l[m+1],g[a]=l[m+2],n[a]=l[m+3]);o.mask=n}}else if(s)if(G(n))for(a=0;a<r;a++)n[a]&&(u=s[d[a]],c[a]=u[0],h[a]=u[1],g[a]=u[2],n[a]=u[3]);else{for(n=new Uint8Array(r),a=0;a<r;a++)u=s[d[a]],c[a]=u[0],h[a]=u[1],g[a]=u[2],n[a]=u[3];o.mask=n}return o.pixels=[c,h,g],o.statistics=null,o.pixelType="u8",o.maskIsAlpha=f,o}function ct(e,t){if(!R(e))return null;const{pixels:o,mask:i}=e,n=o.length;let r=t.lut;const{offset:l}=t;r&&r[0].length===1&&(r=o.map(()=>r));const s=[],p=t.outputPixelType||"u8";for(let a=0;a<n;a++){const d=ye(o[a],i,r[a],l||0,p);s.push(d)}const f=new T({width:e.width,height:e.height,pixels:s,mask:i,pixelType:p});return f.updateStatistics(),f}function ye(e,t,o,i,n){const r=e.length,l=T.createEmptyBand(n,r);if(t)for(let s=0;s<r;s++)t[s]&&(l[s]=o[e[s]-i]);else for(let s=0;s<r;s++)l[s]=o[e[s]-i];return l}function gt(e,t){if(!R(e))return null;const o=e.clone(),{pixels:i}=o,n=o.width*o.height,r=t.length,l=Math.floor(r/2),s=t[Math.floor(l)],p=i[0];let f,a,d,c,h,g,u=!1;const m=new Uint8Array(n),C=new Uint8Array(n),y=new Uint8Array(n);let w=o.mask;const k=t[0].mappedColor.length===4;for(w||(w=new Uint8Array(n),w.fill(k?255:1),o.mask=w),h=0;h<n;h++)if(w[h]){for(f=p[h],u=!1,g=l,a=s,d=0,c=r-1;c-d>1;){if(f===a.value){u=!0;break}f>a.value?d=g:c=g,g=Math.floor((d+c)/2),a=t[Math.floor(g)]}u||(f===t[d].value?(a=t[d],u=!0):f===t[c].value?(a=t[c],u=!0):f<t[d].value?(u=!1,a=null):f>t[d].value&&(f<t[c].value?(a=t[d],u=!0):c===r-1?(u=!1,a=null):(a=t[c],u=!0))),u?(m[h]=a.mappedColor[0],C[h]=a.mappedColor[1],y[h]=a.mappedColor[2],w[h]=a.mappedColor[3]):m[h]=C[h]=y[h]=w[h]=0}return o.pixels=[m,C,y],o.mask=w,o.pixelType="u8",o.maskIsAlpha=k,o}function mt(e,t){if(!R(e))return null;const{width:o,height:i}=e,{inputRanges:n,outputValues:r,outputPixelType:l,noDataRanges:s,allowUnmatched:p,isLastInputRangeInclusive:f}=t,a=e.pixels[0],d=T.createEmptyBand(l,a.length),c=e.mask,h=new Uint8Array(o*i);c?h.set(c):h.fill(255);const g=e.pixelType.startsWith("f")?1e-6:0,u=n.map(w=>w-g);u[0]=n[0],u[u.length-1]=n[n.length-1]+(f?1e-6:0);const m=n.length/2,[C,y]=X(l);for(let w=0;w<i;w++)for(let k=0;k<o;k++){const B=w*o+k;if(h[B]){const _=a[B];let x=!1;for(let D=m-1;D>=0;D--)if(_===u[2*D]||_>u[2*D]&&_<u[2*D+1]){d[B]=r[D],x=!0;break}x||(p?d[B]=_>y?y:_<C?C:_:h[B]=0)}}if(s!=null&&s.length)for(let w=0;w<i;w++)for(let k=0;k<o;k++){const B=w*o+k;if(!c||c[B]){const _=a[B];for(let x=0;x<m;x+=2)if(_>=s[x]&&_<=s[x+1]){d[B]=0,h[B]=0;break}}}return new T({width:o,height:i,pixelType:l,pixels:[d],mask:h})}function pe(e,t,o,i){const n=o!=null&&o.length>=2?new Set(o):null,r=(o==null?void 0:o.length)===1?o[0]:null,l=!!(t!=null&&t.length);for(let s=0;s<e.length;s++)if(i[s]){const p=e[s];if(l){let f=!1;for(let a=0;a<t.length;a+=2)if(p>=t[a]&&p<=t[a+1]){f=!0;break}f||(i[s]=0)}i[s]&&(p===r||n!=null&&n.has(p))&&(i[s]=0)}}function fe(e,t){const o=e[0].length;for(let i=0;i<o;i++)if(t[i]){let n=!1;for(let r=0;r<e.length;r++)if(e[r][i]){n=!0;break}n||(t[i]=0)}}function ke(e,t){const o=e[0].length;for(let i=0;i<o;i++)if(t[i]){let n=!1;for(let r=0;r<e.length;r++)if(e[r][i]===0){n=!0;break}n&&(t[i]=0)}}function Ct(e,t){if(!R(e))return null;const{width:o,height:i,pixels:n}=e,r=o*i,l=new Uint8Array(r);e.mask?l.set(e.mask):l.fill(255);const s=n.length,{includedRanges:p,noDataValues:f,outputPixelType:a,matchAll:d,lookups:c}=t;if(c){const h=[];for(let g=0;g<s;g++){const u=c[g],m=ye(n[g],l,u.lut,u.offset||0,"u8");h.push(m)}h.length===1?l.set(h[0]):d?fe(h,l):ke(h,l)}else if(d){const h=[];for(let g=0;g<s;g++){const u=new Uint8Array(r);u.set(l),pe(n[g],p==null?void 0:p.slice(2*g,2*g+2),f==null?void 0:f[g],u),h.push(u)}h.length===1?l.set(h[0]):fe(h,l)}else for(let h=0;h<s;h++)pe(n[h],p==null?void 0:p.slice(2*h,2*h+2),f==null?void 0:f[h],l);return new T({width:o,height:i,pixelType:a,pixels:n,mask:l})}function yt(e){const{srcPixelType:t,inputRanges:o,outputValues:i,allowUnmatched:n,noDataRanges:r,isLastInputRangeInclusive:l,outputPixelType:s}=e;if(t!=="u8"&&t!=="s8"&&t!=="u16"&&t!=="s16")return null;const p=t.includes("16")?65536:256,f=t.includes("s")?-p/2:0,a=T.createEmptyBand(s,p),d=new Uint8Array(p);n&&d.fill(255);const[c,h]=X(s);if(o!=null&&o.length&&(i!=null&&i.length)){const u=o.map(m=>m-1e-6);u[0]=o[0],l&&(u[u.length-1]=o[o.length-1]);for(let m=0;m<u.length;m++){const C=i[m]>h?h:i[m]<c?c:i[m],y=Math.ceil(u[2*m]-f),w=Math.floor(u[2*m+1]-f);for(let k=y;k<=w;k++)a[k]=C,d[k]=255}}if(r!=null&&r.length)for(let g=0;g<r.length;g++){const u=Math.ceil(r[2*g]-f),m=Math.floor(r[2*g+1]-f);for(let C=u;C<=m;C++)d[C]=0}return{lut:a,offset:f,mask:d}}function kt(e,t,o){if(e!=="u8"&&e!=="s8"&&e!=="u16"&&e!=="s16")return null;const i=e.includes("16")?65536:256,n=e.includes("s")?-i/2:0,r=new Uint8Array(i);if(t)for(let l=0;l<t.length;l++){const s=Math.ceil(t[2*l]-n),p=Math.floor(t[2*l+1]-n);for(let f=s;f<=p;f++)r[f]=255}else r.fill(255);if(o)for(let l=0;l<o.length;l++)r[o[l]-n]=0;return{lut:r,offset:n}}function Ve(e,t,o,i,n,r,l,s){return{xmin:n<=o*e?0:n<o*e+e?n-o*e:e,ymin:r<=i*t?0:r<i*t+t?r-i*t:t,xmax:n+l<=o*e?0:n+l<o*e+e?n+l-o*e:e,ymax:r+s<=i*t?0:r+s<i*t+t?r+s-i*t:t}}function K(e,t,o,i,n,r){const{width:l,height:s}=o.block,{x:p,y:f}=o.offset,{width:a,height:d}=o.mosaic,c=Ve(l,s,i,n,p,f,a,d);let h=0,g=0;if(r){const u=r.hasGCSSShiftTransform?360:r.halfWorldWidth??0,m=l*r.resolutionX,C=r.startX+i*m;C<u&&C+m>u?g=r.rightPadding:C>=u&&(h=r.leftMargin-r.rightPadding,g=0)}if(c.xmax-=g,typeof t!="number")for(let u=c.ymin;u<c.ymax;u++){const m=(n*s+u-f)*a+(i*l-p)+h,C=u*l;for(let y=c.xmin;y<c.xmax;y++)e[m+y]=t[C+y]}else for(let u=c.ymin;u<c.ymax;u++){const m=(n*s+u-f)*a+(i*l-p)+h;for(let C=c.xmin;C<c.xmax;C++)e[m+C]=t}}function wt(e,t,o={}){const{clipOffset:i,clipSize:n,alignmentInfo:r,blockWidths:l}=o;if(l)return Oe(e,t,{blockWidths:l});const s=e.find(x=>R(x));if(j(s))return null;const p=n?n.width:t.width,f=n?n.height:t.height,a=s.width,d=s.height,c=t.width/a,h=t.height/d,g={offset:i||{x:0,y:0},mosaic:n||t,block:{width:a,height:d}},u=s.pixelType,m=T.getPixelArrayConstructor(u),C=s.pixels.length,y=[];let w,k;for(let x=0;x<C;x++){k=new m(p*f);for(let D=0;D<h;D++)for(let v=0;v<c;v++){const A=e[D*c+v];R(A)&&(w=A.pixels[x],K(k,w,g,v,D,r))}y.push(k)}let B;if(e.some(x=>j(x)||G(x.mask)&&x.mask.length>0)){B=new Uint8Array(p*f);for(let x=0;x<h;x++)for(let D=0;D<c;D++){const v=e[x*c+D],A=G(v)?v.mask:null;G(A)?K(B,A,g,D,x,r):K(B,v?1:0,g,D,x,r)}}const _=new T({width:p,height:f,pixels:y,pixelType:u,mask:B});return _.updateStatistics(),_}function Oe(e,t,o){const i=e.find(h=>G(h));if(j(i))return null;const n=e.some(h=>!G(h)||!!h.mask),{width:r,height:l}=t,s=n?new Uint8Array(r*l):null,{blockWidths:p}=o,f=[],a=i.getPlaneCount(),d=T.getPixelArrayConstructor(i.pixelType);if(n)for(let h=0,g=0;h<e.length;g+=p[h],h++){const u=e[h];if(!R(u))continue;const m=q(u.mask);for(let C=0;C<l;C++)for(let y=0;y<p[h];y++)s[C*r+y+g]=m==null?255:m[C*u.width+y]}for(let h=0;h<a;h++){const g=new d(r*l);for(let u=0,m=0;u<e.length;m+=p[u],u++){const C=e[u];if(!R(C))continue;const y=C.pixels[h];if(y!=null)for(let w=0;w<l;w++)for(let k=0;k<p[u];k++)g[w*r+k+m]=y[w*C.width+k]}f.push(g)}const c=new T({width:r,height:l,mask:s,pixels:f,pixelType:i.pixelType});return c.updateStatistics(),c}function xt(e,t,o){if(!R(e))return null;const{width:i,height:n}=e,r=t.x,l=t.y,s=o.width+r,p=o.height+l;if(r<0||l<0||s>i||p>n||r===0&&l===0&&s===i&&p===n)return e;e.mask||(e.mask=new Uint8Array(i*n));const f=e.mask;for(let a=0;a<n;a++){const d=a*i;for(let c=0;c<i;c++)f[d+c]=a<l||a>=p||c<r||c>=s?0:1}return e.updateStatistics(),e}function je(e){if(!R(e))return null;const t=e.clone(),{width:o,height:i,pixels:n}=e,r=n[0],l=t.pixels[0],s=q(e.mask);for(let p=2;p<i-1;p++){const f=new Map;for(let d=p-2;d<p+2;d++)for(let c=0;c<4;c++){const h=d*o+c;O(f,r[h],s?s[h]:1)}l[p*o]=de(f),l[p*o+1]=l[p*o+2]=l[p*o];let a=3;for(;a<o-1;a++){let d=(p-2)*o+a+1;O(f,r[d],s?s[d]:1),d=(p-1)*o+a+1,O(f,r[d],s?s[d]:1),d=p*o+a+1,O(f,r[d],s?s[d]:1),d=(p+1)*o+a+1,O(f,r[d],s?s[d]:1),d=(p-2)*o+a-3,z(f,r[d],s?s[d]:1),d=(p-1)*o+a-3,z(f,r[d],s?s[d]:1),d=p*o+a-3,z(f,r[d],s?s[d]:1),d=(p+1)*o+a-3,z(f,r[d],s?s[d]:1),l[p*o+a]=de(f)}l[p*o+a+1]=l[p*o+a]}for(let p=0;p<o;p++)l[p]=l[o+p]=l[2*o+p],l[(i-1)*o+p]=l[(i-2)*o+p];return t.updateStatistics(),t}function de(e){if(e.size===0)return 0;let t=0,o=-1,i=0;const n=e.keys();let r=n.next();for(;!r.done;)i=e.get(r.value),i>t&&(o=r.value,t=i),r=n.next();return o}function z(e,t,o){if(o===0)return;const i=e.get(t);i===1?e.delete(t):e.set(t,i-1)}function O(e,t,o){o!==0&&e.set(t,e.has(t)?e.get(t)+1:1)}function Ye(e,t,o){let{x:i,y:n}=t;const{width:r,height:l}=o;if(i===0&&n===0&&l===e.height&&r===e.width)return e;const{width:s,height:p}=e,f=Math.max(0,n),a=Math.max(0,i),d=Math.min(i+r,s),c=Math.min(n+l,p);if(d<0||c<0||!R(e))return null;i=Math.max(0,-i),n=Math.max(0,-n);const{pixels:h}=e,g=r*l,u=h.length,m=[];for(let k=0;k<u;k++){const B=h[k],_=T.createEmptyBand(e.pixelType,g);for(let x=f;x<c;x++){const D=x*s;let v=(x+n-f)*r+i;for(let A=a;A<d;A++)_[v++]=B[D+A]}m.push(_)}const C=new Uint8Array(g),y=q(e.mask);for(let k=f;k<c;k++){const B=k*s;let _=(k+n-f)*r+i;for(let x=a;x<d;x++)C[_++]=y?y[B+x]:1}const w=new T({width:o.width,height:o.height,pixelType:e.pixelType,pixels:m,mask:C});return w.updateStatistics(),w}function We(e,t=!0){if(!R(e))return null;const{pixels:o,width:i,height:n,mask:r,pixelType:l}=e,s=[],p=Math.round(i/2),f=Math.round(n/2),a=n-1,d=i-1;for(let h=0;h<o.length;h++){const g=o[h],u=T.createEmptyBand(l,p*f);let m=0;for(let C=0;C<n;C+=2)for(let y=0;y<i;y+=2){const w=g[C*i+y];if(t){const k=y===d?w:g[C*i+y+1],B=C===a?w:g[C*i+y+i],_=y===d?B:C===a?k:g[C*i+y+i+1];u[m++]=(w+k+B+_)/4}else u[m++]=w}s.push(u)}let c=null;if(G(r)){c=new Uint8Array(p*f);let h=0;for(let g=0;g<n;g+=2)for(let u=0;u<i;u+=2){const m=r[g*i+u];if(t){const C=u===d?m:r[g*i+u+1],y=g===a?m:r[g*i+u+i],w=u===d?y:g===a?C:r[g*i+u+i+1];c[h++]=m*C*y*w?1:0}else c[h++]=m}}return new T({width:p,height:f,pixelType:l,pixels:s,mask:c})}function vt(e,t,o){if(!R(e))return null;const{width:i,height:n}=t;let{width:r,height:l}=e;const s=new Map,p={x:0,y:0},f=o==null?1:1+o;let a=e;for(let d=0;d<f;d++){const c=Math.ceil(r/i),h=Math.ceil(l/n);for(let g=0;g<h;g++){p.y=g*n;for(let u=0;u<c;u++){p.x=u*i;const m=Ye(a,p,t);s.set(`${d}/${g}/${u}`,m)}}d<f-1&&(a=We(a)),r=Math.round(r/2),l=Math.round(l/2)}return s}function we(e,t,o,i,n=.5){const{width:r,height:l}=e,{width:s,height:p}=t,f=i.cols,a=i.rows,d=Math.ceil(s/f-.1/f),c=Math.ceil(p/a-.1/a);let h,g,u,m,C,y,w;const k=d*f,B=k*c*a,_=new Float32Array(B),x=new Float32Array(B),D=new Uint32Array(B),v=new Uint32Array(B);let A,E,P=0;for(let S=0;S<c;S++)for(let U=0;U<d;U++){h=12*(S*d+U),g=o[h],u=o[h+1],m=o[h+2],C=o[h+3],y=o[h+4],w=o[h+5];for(let M=0;M<a;M++){P=(S*a+M)*k+U*f,E=(M+.5)/a;for(let b=0;b<M;b++)A=(b+.5)/f,_[P+b]=(g*A+u*E+m)*r-n,x[P+b]=(C*A+y*E+w)*l-n,D[P+b]=Math.round(_[P+b]),v[P+b]=Math.round(x[P+b])}h+=6,g=o[h],u=o[h+1],m=o[h+2],C=o[h+3],y=o[h+4],w=o[h+5];for(let M=0;M<a;M++){P=(S*a+M)*k+U*f,E=(M+.5)/a;for(let b=M;b<f;b++)A=(b+.5)/f,_[P+b]=(g*A+u*E+m)*r-n,x[P+b]=(C*A+y*E+w)*l-n,D[P+b]=Math.round(_[P+b]),v[P+b]=Math.round(x[P+b])}}return{offsets_x:_,offsets_y:x,offsets_xi:D,offsets_yi:v,gridWidth:k}}function Bt(e,t){const{coefficients:o,spacing:i}=t,{offsets_x:n,offsets_y:r,gridWidth:l}=we(e,e,o,{rows:i[0],cols:i[1]},.5),{width:s,height:p}=e,f=new Float32Array(s*p),a=180/Math.PI;for(let d=0;d<p;d++)for(let c=0;c<s;c++){const h=d*l+c,g=d===0?h:h-l,u=d===p-1?h:h+l,m=n[g]-n[u],C=r[u]-r[g];if(isNaN(m)||isNaN(C))f[d*s+c]=90;else{let y=Math.atan2(C,m)*a;y=(360+y)%360,f[d*s+c]=y}}return f}function Dt(e,t,o,i,n="nearest"){if(!R(e))return null;n==="majority"&&(e=je(e));const{pixels:r,mask:l,pixelType:s}=e,p=e.width,f=e.height,a=T.getPixelArrayConstructor(s),d=r.length,{width:c,height:h}=t;let g=!1;for(let v=0;v<o.length;v+=3)o[v]===-1&&o[v+1]===-1&&o[v+2]===-1&&(g=!0);const{offsets_x:u,offsets_y:m,offsets_xi:C,offsets_yi:y,gridWidth:w}=we({width:p,height:f},t,o,i,n==="majority"?0:.5);let k;const B=(v,A,E)=>{const P=v instanceof Float32Array||v instanceof Float64Array?0:.5;for(let S=0;S<h;S++){k=S*w;for(let U=0;U<c;U++){if(u[k]<0||m[k]<0)v[S*c+U]=0;else if(E)v[S*c+U]=A[C[k]+y[k]*p];else{const M=Math.floor(u[k]),b=Math.floor(m[k]),J=Math.ceil(u[k]),Y=Math.ceil(m[k]),W=u[k]-M,te=m[k]-b;if(!l||l[M+b*p]&&l[M+b*p]&&l[M+Y*p]&&l[J+Y*p]){const ve=(1-W)*A[M+b*p]+W*A[J+b*p],Be=(1-W)*A[M+Y*p]+W*A[J+Y*p];v[S*c+U]=(1-te)*ve+te*Be+P}else v[S*c+U]=A[C[k]+y[k]*p]}k++}}},_=[];let x;for(let v=0;v<d;v++)x=new a(c*h),B(x,r[v],n==="nearest"||n==="majority"),_.push(x);const D=new T({width:c,height:h,pixelType:s,pixels:_});if(G(l))D.mask=new Uint8Array(c*h),B(D.mask,l,!0);else if(g){D.mask=new Uint8Array(c*h);for(let v=0;v<c*h;v++)D.mask[v]=u[v]<0||m[v]<0?0:1}return D.updateStatistics(),D}const N=new Map;N.set("meter-per-second",1),N.set("kilometer-per-hour",.277778),N.set("knots",.514444),N.set("feet-per-second",.3048),N.set("mile-per-hour",.44704);const Z=180/Math.PI,_t=new ee({esriMetersPerSecond:"meter-per-second",esriKilometersPerHour:"kilometer-per-hour",esriKnots:"knots",esriFeetPerSecond:"feet-per-second",esriMilesPerHour:"mile-per-hour"});function bt(e,t){return N.get(e)/N.get(t)||1}function xe(e){return(450-e)%360}function He(e,t="geographic"){const[o,i]=e,n=Math.sqrt(o*o+i*i);let r=Math.atan2(i,o)*Z;return r=(360+r)%360,t==="geographic"&&(r=xe(r)),[n,r]}function ze(e,t="geographic"){let o=e[1];t==="geographic"&&(o=xe(o)),o%=360;const i=e[0];return[i*Math.cos(o/Z),i*Math.sin(o/Z)]}function At(e,t,o,i="geographic"){if(!R(e)||j(o))return e;const n=t==="vector-magdir"?e.clone():q(ue(e,t)),r=n.pixels[1];for(let l=0;l<r.length;l++)r[l]=i==="geographic"?(r[l]+o[l]+270)%360:(r[l]+360-o[l])%360;return t==="vector-magdir"?n:ue(n,"vector-magdir")}function ue(e,t,o="geographic",i=1){if(!R(e))return e;const{pixels:n,width:r,height:l}=e,s=r*l,p=n[0],f=n[1],a=e.pixelType.startsWith("f")?e.pixelType:"f32",d=T.createEmptyBand(a,s),c=T.createEmptyBand(a,s);let h=0;for(let u=0;u<l;u++)for(let m=0;m<r;m++)t==="vector-uv"?([d[h],c[h]]=He([p[h],f[h]],o),d[h]*=i):([d[h],c[h]]=ze([p[h],f[h]],o),d[h]*=i,c[h]*=i),h++;const g=new T({pixelType:a,width:e.width,height:e.height,mask:e.mask,validPixelCount:e.validPixelCount,maskIsAlpha:e.maskIsAlpha,pixels:[d,c]});return g.updateStatistics(),g}function Tt(e,t,o=1){if(o===1||!R(e))return e;const i=e.clone(),{pixels:n,width:r,height:l}=i,s=n[0],p=n[1];let f=0;for(let a=0;a<l;a++)for(let d=0;d<r;d++)t==="vector-uv"?(s[f]*=o,p[f]*=o):s[f]*=o,f++;return i.updateStatistics(),i}export{kt as A,ye as B,mt as C,Bt as D,rt as E,Dt as F,Pe as G,it as H,He as I,ce as J,yt as M,vt as R,xt as S,ot as _,nt as a,T as b,_t as c,ue as d,wt as e,R as f,Tt as g,pt as h,ut as i,gt as j,dt as k,bt as l,At as m,lt as n,Me as o,ct as p,et as q,Ie as r,X as s,tt as t,at as u,ft as v,he as w,ae as x,ht as y,Ct as z};

import{i as m}from"./mat4-4714ff8c.js";import{e as u}from"./mat4f32-60a2394b.js";import{f as x,o as f,n as l}from"./vec3-015ca254.js";import{i as t,b as c}from"./ShaderBuilder-c7fc4a30.js";let M=class extends t{constructor(a,i){super(a,"vec3",c.Pass,(e,r,n)=>e.setUniform3fv(a,i(r,n)))}};class o extends t{constructor(a,i){super(a,"mat4",c.Pass,(e,r,n)=>e.setUniformMatrix4fv(a,i(r,n)))}}let w=class extends t{constructor(a,i){super(a,"vec3",c.Draw,(e,r,n,d)=>e.setUniform3fv(a,i(r,n,d)))}};class g extends t{constructor(a,i){super(a,"mat4",c.Draw,(e,r,n)=>e.setUniformMatrix4fv(a,i(r,n)))}}function D(s,a){a.instancedDoublePrecision?s.constants.add("cameraPosition","vec3",x):s.uniforms.add(new w("cameraPosition",(i,e)=>f(p,e.camera.viewInverseTransposeMatrix[3]-i.origin[0],e.camera.viewInverseTransposeMatrix[7]-i.origin[1],e.camera.viewInverseTransposeMatrix[11]-i.origin[2])))}function U(s,a){if(!a.instancedDoublePrecision)return void s.uniforms.add([new o("proj",(e,r)=>r.camera.projectionMatrix),new g("view",(e,r)=>m(v,r.camera.viewMatrix,e.origin)),new w("localOrigin",e=>e.origin)]);const i=e=>f(p,e.camera.viewInverseTransposeMatrix[3],e.camera.viewInverseTransposeMatrix[7],e.camera.viewInverseTransposeMatrix[11]);s.uniforms.add([new o("proj",(e,r)=>r.camera.projectionMatrix),new o("view",(e,r)=>m(v,r.camera.viewMatrix,i(r))),new M("localOrigin",(e,r)=>i(r))])}const v=u(),p=l();function O(s){s.uniforms.add(new o("viewNormal",(a,i)=>i.camera.viewInverseTransposeMatrix))}export{M as a,w as b,D as c,O as d,o as e,g as o,U as v};

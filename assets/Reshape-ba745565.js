import{t as k,e as d,y as v,a as F}from"./JSONSupport-32b5ad86.js";import"./geometry-f89ca072.js";import{g as G}from"./Graphic-46941d56.js";import{j as D}from"./asyncUtils-8de18dd2.js";import{j as I}from"./Collection-9e42cc30.js";import{s as U,a as L}from"./Error-62cc7aff.js";import{n as z}from"./Evented-36093e88.js";import{a as V,t as u,r as g,w as O,x as P}from"./typedArrayUtil-70e1d79e.js";import{b as C}from"./quantityFormatUtils-fb5c2100.js";import{f as j,P as S,l as B,w as J}from"./reactiveUtils-e6d6c898.js";import{c as R}from"./screenUtils-410d12c0.js";import"./ensureType-249b88cd.js";import{j as K,m as N,e as M,k as T}from"./Polyline-cf51ad23.js";import{h as Q}from"./GraphicsLayer-78551f17.js";import{y as b}from"./symbols-5a102dff.js";import{l as W}from"./ViewingMode-5d7d590b.js";import{u as X}from"./SnappingVisualizer2D-4e470a75.js";import{r as Y}from"./drawUtils-0bdf2fe1.js";import{h as Z,D as q}from"./GraphicMover-029412a9.js";import{cg as $,b4 as tt,cu as et,cv as it}from"./index-8cd323f3.js";import{h as ot}from"./settings-914f5a28.js";import{V as rt}from"./EditGeometryOperations-40bc590b.js";import{e as st}from"./SnappingContext-06aab9ca.js";import{h as H,c as pt,b as nt}from"./automaticLengthMeasurementUtils-2ca82d9a.js";import{r as at,n as ht}from"./TranslateTooltipInfos-494820fc.js";import{u as ct}from"./automaticAreaMeasurementUtils-c57d3abd.js";import{w as f}from"./Extent-2ad2c9a9.js";import"./string-7a2f1d87.js";import"./nextTick-3ee5a785.js";import"./promiseUtils-59dab60c.js";import"./typeUtils-05f9d41d.js";import"./PopupTemplate-c1fb66ed.js";import"./Clonable-95fa5d2d.js";import"./fieldUtils-e397be4b.js";import"./preload-helper-41c905a7.js";import"./arcadeOnDemand-5c3ab3f7.js";import"./enumeration-504d95a2.js";import"./number-2db5f4a2.js";import"./locale-30120714.js";import"./Identifiable-99d92428.js";import"./jsonUtils-6d0a72e3.js";import"./SimpleObservable-a6d3d2d8.js";import"./Portal-52d960e8.js";import"./request-f01affa1.js";import"./Loadable-7c3ecd79.js";import"./Promise-3959c3ee.js";import"./PortalGroup-b49a7409.js";import"./PortalUser-85cf1ca9.js";import"./Ellipsoid-89682c5e.js";import"./collectionUtils-61fc1a27.js";import"./HandleOwner-f4554d8c.js";import"./Layer-ab90f8be.js";import"./BlendLayer-fe49ee20.js";import"./colorUtils-639f4d25.js";import"./mat4f32-60a2394b.js";import"./mat4-4714ff8c.js";import"./vec3-015ca254.js";import"./common-d0b63c2d.js";import"./ScaleRangeLayer-56857dcb.js";import"./ElevationInfo-bc15f954.js";import"./lengthUtils-e2d3809d.js";import"./CIMSymbol-561444b9.js";import"./Color-5a385b27.js";import"./mathUtils-5b623c84.js";import"./vec4-c7a19f0d.js";import"./opacityUtils-c0957a27.js";import"./symbolLayerUtils3D-5a2f49a8.js";import"./aaBoundingBox-dfb04110.js";import"./aaBoundingRect-42f9721f.js";import"./persistableUrlUtils-ccf13db2.js";import"./Symbol3DAnchorPosition2D-d0207ef9.js";import"./vec2-8acac370.js";import"./vec2f64-f35767d6.js";import"./enums-e09487cb.js";import"./GraphicManipulator-f6ebcf40.js";import"./projection-d42b91be.js";import"./assets-640b4d04.js";import"./zscale-d428b1da.js";import"./elevationInfoUtils-cb162a43.js";import"./labelingInfo-81f8350c.js";import"./labelUtils-2517fbb8.js";import"./layerUtils-ff76096c.js";import"./defaultsJSON-59981e75.js";import"./jsonUtils-ba20c384.js";import"./drapedUtils-e5dd7bab.js";import"./IdentityManager-844d980b.js";import"./intl-0ee83c79.js";import"./messages-f54f7f46.js";import"./uuid-73213768.js";import"./dom-2ec1e33c.js";import"./Cyclical-34b2a5e3.js";import"./workers-591e0dfc.js";import"./Connection-000cba43.js";import"./HeightModelInfo-bc3bd77c.js";import"./sphere-092242fd.js";import"./vec4f64-6d0e93be.js";import"./byteSizeEstimations-f0cab514.js";import"./mat3f64-50f3b9f6.js";import"./mat4f64-abdda1bb.js";import"./quatf64-f8f1c132.js";import"./lineSegment-8ffcb750.js";import"./plane-fef3662c.js";import"./spatialReferenceEllipsoidUtils-26c8dea5.js";import"./scaleUtils-b27f2fc2.js";import"./AttachmentInfo-2774f92c.js";import"./AttachmentQuery-be73c1f4.js";import"./LegendOptions-d1ee6f9f.js";import"./DimensionalDefinition-89a02a09.js";import"./UniqueValueRenderer-31cfe725.js";import"./diffUtils-a2efee1b.js";import"./colorRamps-844ba070.js";import"./sizeVariableUtils-d4870b0d.js";import"./visualVariableUtils-6f78f1dd.js";import"./compilerUtils-2eb56463.js";import"./styleUtils-ba5d50e4.js";import"./vectorFieldUtils-b0aae2f9.js";import"./colorUtils-7641d345.js";import"./normalizeUtils-11faac16.js";import"./normalizeUtilsCommon-f5194d67.js";import"./ItemCache-47345b61.js";import"./MemCache-a072224a.js";import"./cimSymbolUtils-12c2ae8a.js";import"./utils-3d986af0.js";import"./jsonUtils-0cd7beab.js";import"./DictionaryLoader-e5256637.js";import"./LRUCache-805da42e.js";import"./deprecate-2ea4a12e.js";import"./heatmapUtils-bc76f08e.js";import"./Query-6df7497c.js";import"./TimeExtent-4bfae662.js";import"./Field-efd8d6fa.js";import"./fieldType-ec749512.js";import"./executeQueryJSON-c3e8823f.js";import"./query-159ca0c6.js";import"./pbfQueryUtils-e595cc71.js";import"./pbf-490f560a.js";import"./OptimizedFeature-cb86a86f.js";import"./OptimizedFeatureSet-1d1ac4b9.js";import"./queryZScale-7c3cd57e.js";import"./FeatureSet-adc6c42d.js";import"./featureConversionUtils-66a9b1ed.js";import"./RelationshipQuery-1388e5e8.js";import"./TopFeaturesQuery-c51356f1.js";import"./FeatureLayer-c3299dce.js";import"./MultiOriginJSONSupport-247be6b9.js";import"./serviceCapabilitiesUtils-d47be03f.js";import"./arcgisLayerUrl-1177870a.js";import"./FeatureLayerBase-4bc86305.js";import"./OperationalLayer-892ef1ff.js";import"./TimeReference-dbe22fa2.js";import"./datetime-b6333958.js";import"./editsZScale-1f9f5428.js";import"./APIKeyMixin-a999140b.js";import"./ArcGISService-69574b36.js";import"./CustomParametersMixin-0cb5d402.js";import"./EditBusLayer-40721674.js";import"./FeatureReductionLayer-5d021257.js";import"./OrderedLayer-e39f681d.js";import"./PortalLayer-f8afa381.js";import"./PortalItem-476b4f2f.js";import"./portalItemUtils-f08de884.js";import"./RefreshableLayer-6e09e5c7.js";import"./TemporalLayer-1cafdc62.js";import"./FeatureTemplate-c492af3e.js";import"./FeatureType-9aee1062.js";import"./fieldProperties-13016a3b.js";import"./FieldsIndex-3347fdc5.js";import"./versionUtils-3b55ef95.js";import"./styleUtils-a2cb1d02.js";import"./popupUtils-ef59e204.js";import"./callExpressionWithFeature-b2780134.js";import"./quantizationUtils-5accf704.js";import"./webStyleSymbolUtils-7af9b968.js";import"./devEnvironmentUtils-5002a058.js";import"./Scheduler-22864fbd.js";import"./ElevationSamplerData-89295dc0.js";import"./TileInfo-c1a6fc90.js";import"./Basemap-a98ee4eb.js";import"./loadAll-b0bbaf30.js";import"./writeUtils-054a51f5.js";import"./CollectionFlattener-53f524d1.js";import"./TablesMixin-d0eb7f9b.js";import"./PhysicallyBasedRendering.glsl-d72e2a11.js";import"./View.glsl-725bf3cf.js";import"./ShaderBuilder-c7fc4a30.js";import"./FloatPassUniform-8a52db3d.js";import"./Float4PassUniform-52993952.js";import"./RgbaFloatEncoding.glsl-31b2b966.js";import"./Texture2DPassUniform-1510cbb0.js";import"./vec3f32-01c06d8d.js";import"./VertexAttribute-15d1866a.js";import"./Texture2DDrawUniform-d1eaa0d6.js";import"./basicInterfaces-7449a8bf.js";import"./PiUtils.glsl-9dc0973a.js";import"./ReadLinearDepth.glsl-9abddde9.js";import"./WaterSurface.glsl-ad07df19.js";import"./ForwardLinearDepth.glsl-3606f02d.js";import"./Matrix3PassUniform-285be0f9.js";import"./Slice.glsl-e5fdd8d3.js";import"./Transform.glsl-e6366353.js";import"./OutputHighlight.glsl-569dde3f.js";import"./MultipassTerrainTest.glsl-029ffa3f.js";import"./NormalUtils.glsl-d1e61521.js";import"./AlphaCutoff-96178e0d.js";import"./TransparencyPassType-a1cb0602.js";import"./EvaluateSceneLighting.glsl-ed7fcdc2.js";import"./VisualVariablePassParameters-ded3d86d.js";import"./enums-fc527c7c.js";import"./VertexElementDescriptor-2925c6af.js";import"./Texture-42bd3a76.js";import"./context-util-eb98c678.js";import"./Util-c12e93ba.js";import"./SSAOBlur.glsl-2bfd75b0.js";import"./ScreenSpacePass.glsl-28a2b6e5.js";import"./SSAO.glsl-1d087e8c.js";import"./ShaderTechniqueConfiguration-5b4afc58.js";import"./mat3-4fd89d48.js";import"./HUD.glsl-03dc2889.js";import"./VerticalOffset.glsl-2b654767.js";import"./Octree-fac2eadb.js";import"./objectResourceUtils-f1a10a8c.js";import"./BufferView-da65c548.js";import"./vec33-6cea25ab.js";import"./DefaultMaterial_COLOR_GAMMA-8afda99b.js";import"./types-e1c0a5bf.js";import"./Version-b7702d36.js";import"./quat-99c4e099.js";import"./resourceUtils-527631ac.js";import"./Indices-7097baff.js";import"./DefaultMaterial.glsl-0c704a85.js";import"./MixExternalColor.glsl-96fc9ef8.js";import"./symbolColorUtils-7c94928f.js";import"./ObjectAndLayerIdColor.glsl-751e40ac.js";import"./OutputDepth.glsl-ccbc6366.js";import"./VisualVariables.glsl-655a358f.js";import"./DiscardOrAdjustAlphaBlend.glsl-27b032af.js";import"./VertexColor.glsl-e2eb2da5.js";import"./Normals.glsl-81bc0899.js";import"./vec2f32-eaf29605.js";import"./Texture-2b2e584f.js";import"./TextureOnly.glsl-12d60c43.js";import"./Attribute-f72d3f37.js";import"./InterleavedLayout-d75b8228.js";import"./DefaultTechniqueConfiguration-d3c0bf46.js";import"./RealisticTree.glsl-f514fb19.js";import"./edgeProcessing-9fe73f05.js";import"./deduplicate-3aef92f2.js";import"./MeshComponent-76cc0acf.js";import"./earcut-61f7b102.js";import"./projection-720a032f.js";import"./HUDMaterial.glsl-bcc90ab4.js";import"./sdfPrimitives-16d07d48.js";import"./floatRGBA-11065dbc.js";import"./dehydratedFeatures-be6dfdbf.js";import"./labelFormatUtils-deccc57b.js";import"./orientedBoundingBox-7f391048.js";import"./quatf32-51a323b8.js";import"./LineCallout.glsl-828f2c8d.js";import"./QueryEngineResult-60e819c8.js";import"./WhereClause-ec2695a9.js";import"./executionError-fb3f283a.js";import"./utils-eec406bb.js";import"./generateRendererUtils-9fa055c1.js";import"./json-48e3ea08.js";import"./MarkerSizing.glsl-1e815ddd.js";import"./RibbonLine.glsl-3b5ffb4c.js";import"./LineStipple.glsl-df787c01.js";import"./LineMarker.glsl-af47e9ca.js";import"./NativeLine.glsl-eddd3297.js";import"./Path.glsl-98387e31.js";import"./ColorMaterial.glsl-2f16b93b.js";import"./Pattern.glsl-3d1048ed.js";import"./LercDecoder-bc94632d.js";import"./enums-fb086c25.js";import"./config-f7904f35.js";import"./TileKey-5f02dc79.js";import"./workerHelper-7b69330e.js";import"./capabilities-ef053cf2.js";import"./originUtils-1469eeaf.js";import"./multiOriginJSONSupportUtils-c978f4c3.js";import"./saveUtils-44b7e317.js";import"./resourceUtils-a295dbcf.js";import"./floating-ui-8c8de742.js";import"./StreamLayer-869211a2.js";import"./geometryEngine-5399ce6b.js";import"./geometryEngineBase-e1a33b0a.js";import"./hydrated-d446f5f6.js";import"./SceneFilter-9f7d00a7.js";import"./persistable-5845b8f0.js";import"./resourceExtension-58c3e69d.js";import"./DimensionAnalysis-26fb1362.js";import"./Analysis-ba6617ff.js";import"./ExportImageParameters-1fbdfa05.js";import"./sublayerUtils-1d562031.js";import"./PointSnappingHint-6df76a59.js";import"./euclideanLengthMeasurementUtils-bdc56b7d.js";import"./measurementUtils-7e7c4152.js";import"./euclideanAreaMeasurementUtils-1d62fd94.js";class mt{constructor(e,i,o){this.graphic=e,this.mover=i,this.selected=o,this.type="reshape-start"}}class lt{constructor(e,i,o){this.graphic=e,this.mover=i,this.selected=o,this.type="reshape"}}class dt{constructor(e,i,o){this.graphic=e,this.mover=i,this.selected=o,this.type="reshape-stop"}}class vt{constructor(e,i,o){this.mover=e,this.dx=i,this.dy=o,this.type="move-start"}}class yt{constructor(e,i,o){this.mover=e,this.dx=i,this.dy=o,this.type="move"}}class _t{constructor(e,i,o){this.mover=e,this.dx=i,this.dy=o,this.type="move-stop"}}class gt{constructor(e){this.added=e,this.type="vertex-select"}}class ut{constructor(e){this.removed=e,this.type="vertex-deselect"}}class xt{constructor(e,i,o,r){this.added=e,this.graphic=i,this.oldGraphic=o,this.vertices=r,this.type="vertex-add"}}class ft{constructor(e,i,o,r){this.removed=e,this.graphic=i,this.oldGraphic=o,this.vertices=r,this.type="vertex-remove"}}const y=ot.reshapeGraphics,E={vertices:{default:new b({style:"circle",size:y.vertex.size,color:y.vertex.color,outline:{color:y.vertex.outlineColor,width:1}}),hover:new b({style:"circle",size:y.vertex.hoverSize,color:y.vertex.hoverColor,outline:{color:y.vertex.hoverOutlineColor,width:1}}),selected:new b({style:"circle",size:y.selected.size,color:y.selected.color,outline:{color:y.selected.outlineColor,width:1}})},midpoints:{default:new b({style:"circle",size:y.midpoint.size,color:y.midpoint.color,outline:{color:y.midpoint.outlineColor,width:1}}),hover:new b({style:"circle",size:y.midpoint.size,color:y.midpoint.color,outline:{color:y.midpoint.outlineColor,width:1}})}};let l=class extends z.EventedAccessor{constructor(t){super(t),this._activeOperationInfo=null,this._editGeometryOperations=null,this._handles=new k,this._graphicAttributes={esriSketchTool:"box"},this._mover=null,this._snappingContext=null,this._snappingTask=null,this._stagedVertex=null,this._tooltip=null,this._viewHandles=new k,this.callbacks={onReshapeStart(){},onReshape(){},onReshapeStop(){},onMoveStart(){},onMove(){},onMoveStop(){},onGraphicClick(){}},this.enableMidpoints=!0,this.enableMovement=!0,this.enableVertices=!0,this.graphic=null,this.layer=null,this.midpointGraphics=new I,this.midpointSymbol=new b({style:"circle",size:6,color:[200,200,200],outline:{color:[100,100,100],width:1}}),this.selectedVertices=[],this.snappingManager=null,this.tooltipOptions=new $,this.type="reshape",this.vertexGraphics=new I,this.view=null}initialize(){const t=this.view;this._highlightHelper=new Z({view:t}),this._setup(),this._handles.add([j(()=>t==null?void 0:t.ready,()=>{const{layer:e,view:i}=this;et(i,e),this._viewHandles.add(i.on("key-down",o=>this._keyDownHandler(o),it.TOOL))},{once:!0,initial:!0}),S(()=>this.graphic,()=>this.refresh()),S(()=>this.layer,(e,i)=>{i&&(this._clearSelection(),this._resetGraphics(i)),this.refresh()}),S(()=>this.enableMidpoints,()=>this.refresh()),B(()=>this.tooltipOptions.enabled,e=>{this._tooltip=e?new nt({view:this.view}):V(this._tooltip)},J)])}destroy(){var t;this._reset(),(t=this._mover)==null||t.destroy(),this._mover=null,this._tooltip=V(this._tooltip),this._handles=V(this._handles),this._viewHandles=V(this._viewHandles)}set highlightsEnabled(t){var e;(e=this._highlightHelper)==null||e.removeAll(),this._set("highlightsEnabled",t),this._setUpHighlights()}get state(){const t=!!this.get("view.ready"),e=!(!this.get("graphic")||!this.get("layer"));return t&&e?"active":t?"ready":"disabled"}set symbols(t){const{midpoints:e=E.midpoints,vertices:i=E.vertices}=t||{};this._set("symbols",{midpoints:e,vertices:i})}isUIGraphic(t){const e=[];return this.graphic&&e.push(this.graphic),e.concat(this.vertexGraphics.items,this.midpointGraphics.items),e.length>0&&e.includes(t)}refresh(){this._reset(),this._setup()}reset(){this.graphic=null}clearSelection(){this._clearSelection()}removeSelectedVertices(){this.selectedVertices.length&&this._removeVertices(this.selectedVertices)}_setup(){const{graphic:t,layer:e}=this;if(!e||!t||u(t.geometry))return;const i=t.geometry;i.type!=="mesh"&&i.type!=="extent"?(i.type==="polygon"&&K(i),this._setUpHighlights(),this._setupGraphics(),this._setupMover()):this._logGeometryTypeError()}_setUpHighlights(){this.highlightsEnabled&&this.graphic&&this._highlightHelper.add(this.graphic)}_setUpGeometryHelper(){const t=this.graphic.geometry;if(u(t)||t.type==="mesh"||t.type==="extent")return void this._logGeometryTypeError();const e=t.type==="multipoint"?new N({paths:t.points,spatialReference:t.spatialReference}):t;this._editGeometryOperations=rt.fromGeometry(e,W.Local)}_saveSnappingContextForHandle(t,e){var i;this._snappingGraphicsLayer=new Q({listMode:"hide",internal:!0,title:"Reshape snapping layer"}),this.view.map.layers.add(this._snappingGraphicsLayer),this._snappingContext=new st({editGeometryOperations:this._editGeometryOperations,elevationInfo:{mode:"on-the-ground",offset:0},pointer:((i=e.viewEvent)==null?void 0:i.pointerType)||"mouse",excludeFeature:this.graphic,visualizer:new X(this._snappingGraphicsLayer),vertexHandle:this._getVertexFromEditGeometry(t)})}_reset(){this._clearSelection(),this._highlightHelper.removeAll(),this._updateTooltip(),this._resetGraphics(),this._resetSnappingStateVars(),this._activeOperationInfo=null,this._mover&&this._mover.destroy(),this._mover=null,this.view.cursor="default"}_resetSnappingStateVars(){var t;g(this.snappingManager)&&this.snappingManager.doneSnapping(),g(this._snappingGraphicsLayer)&&((t=this.view)!=null&&t.map&&this.view.map.layers.remove(this._snappingGraphicsLayer),this._snappingGraphicsLayer.destroy()),this._editGeometryOperations=V(this._editGeometryOperations),this._snappingTask=O(this._snappingTask),this._snappingTask=null,this._snappingContext=null,this._stagedVertex=null}_resetGraphics(t){this._removeMidpointGraphics(t),this._removeVertexGraphics(t),this._set("selectedVertices",[])}_removeMidpointGraphics(t){const e=t||this.layer;e&&e.removeMany(this.midpointGraphics.items),this.midpointGraphics.items.forEach(i=>i.destroy()),this.midpointGraphics.removeAll()}_removeVertexGraphics(t){const e=t||this.layer;e&&e.removeMany(this.vertexGraphics.items),this.vertexGraphics.items.forEach(i=>i.destroy()),this.vertexGraphics.removeAll()}_getCoordinatesForUI(t){const e=M(t.clone());if(t.type==="polygon")for(const i of e){const o=i[i.length-1];i[0][0]===o[0]&&i[0][1]===o[1]&&i.length>2&&i.pop()}return e}_setupGraphics(){const t=this.graphic.geometry;if(g(t)&&(t.type==="polyline"||t.type==="polygon")){const e=this._getCoordinatesForUI(t);this.enableMidpoints&&this._setUpMidpointGraphics(e),this.enableVertices&&this._setUpVertexGraphics(e)}}_setUpMidpointGraphics(t){this._removeMidpointGraphics();const e=this._createMidpointGraphics(t);this.midpointGraphics.addMany(e),this.layer.addMany(e)}_setUpVertexGraphics(t){this._removeVertexGraphics();const e=this._createVertexGraphics(t);this.vertexGraphics.addMany(e),this._storeRelatedVertexIndices(),this.layer.addMany(e)}_createVertexGraphics(t){const{_graphicAttributes:e,symbols:i,view:{spatialReference:o}}=this,r=[];return t==null||t.forEach((p,s)=>{p.forEach((a,h)=>{var m;const[n,c]=a;r.push(new G({geometry:new f({x:n,y:c,spatialReference:o}),symbol:(m=i==null?void 0:i.vertices)==null?void 0:m.default,attributes:{...e,pathIndex:s,pointIndex:h}}))})}),r}_createMidpointGraphics(t){const{_graphicAttributes:e,symbols:i,view:{spatialReference:o}}=this,r=[];return t==null||t.forEach((p,s)=>{p.forEach((a,h)=>{const[n,c]=a,m=p[h+1]?h+1:0;if(P(this.graphic.geometry,"type")==="polygon"||m!==0){const[_,x]=p[m],[w,A]=T([n,c],[_,x]);r.push(new G({geometry:new f({x:w,y:A,spatialReference:o}),symbol:i.midpoints.default,attributes:{...e,pathIndex:s,pointIndexStart:h,pointIndexEnd:m}}))}})}),r}_storeRelatedVertexIndices(){const t=this.vertexGraphics.items;if(!t)return;const e=t.map(({geometry:i})=>({x:i.x,y:i.y}));for(let i=0;i<e.length;i++){const o=[];for(let r=0;r<e.length;r++){if(i===r)continue;const p=e[i],s=e[r];p.x===s.x&&p.y===s.y&&o.push(r)}t[i].attributes.relatedGraphicIndices=o}}_setupMover(){const{enableMovement:t,graphic:e,midpointGraphics:i,vertexGraphics:o,view:r}=this,p=o.concat(i).items;t&&p.push(e),this._mover=new q({enableMoveAllGraphics:!1,highlightsEnabled:!1,indicatorsEnabled:!1,graphics:p,view:r,callbacks:{onGraphicClick:s=>this._onGraphicClickCallback(s),onGraphicMoveStart:s=>this._onGraphicMoveStartCallback(s),onGraphicMove:s=>this._onGraphicMoveCallback(s),onGraphicMoveStop:s=>this._onGraphicMoveStopCallback(s),onGraphicPointerOver:s=>this._onGraphicPointerOverCallback(s),onGraphicPointerOut:s=>this._onGraphicPointerOutCallback(s)}})}_onGraphicClickCallback(t){t.viewEvent.stopPropagation();const e=t.graphic;if(e===this.graphic)this.clearSelection(),this.emit("graphic-click",t),this.callbacks.onGraphicClick&&this.callbacks.onGraphicClick(t);else if(this._isMidpoint(e)){if(t.viewEvent.button===2)return;const i=this.graphic.clone(),o=this._createVertexFromMidpoint(e);this.refresh(),this._emitVertexAddEvent([e],i,o)}else this._isVertex(e)&&(t.viewEvent.stopPropagation(),t.viewEvent.button===2?this._removeVertices(e):(t.viewEvent.native.shiftKey||this._clearSelection(),this.selectedVertices.includes(e)?this._removeFromSelection(e,!0):this._addToSelection(e)))}_setUpOperation(t){const{graphic:e,dx:i,dy:o}=t,r=e===this.graphic;this._resetSnappingStateVars(),this._setUpGeometryHelper(),this._saveSnappingContextForHandle(e,t),this._activeOperationInfo={target:this.graphic,mover:e,operationType:r?"move":"reshape",totalDx:i,totalDy:o}}_onGraphicMoveStartCallback(t){const{dx:e,dy:i,graphic:o}=t;if(o===this.graphic){const{geometry:r}=o;return this._setUpOperation(t),this._emitMoveStartEvent(e,i),void(g(r)&&r.type==="point"&&this._onHandleMove(o,e,i,t,()=>{this._updateTooltip(this.graphic,t.viewEvent),this._emitMoveEvent(e,i)}))}if(!this.selectedVertices.includes(o)){if(this._clearSelection(),this._isMidpoint(o)){const r=this.graphic.clone(),p=this._createVertexFromMidpoint(o);this._emitVertexAddEvent([o],r,p)}this._addToSelection(o)}this._setUpOperation(t),this._emitReshapeStartEvent(o),this._onHandleMove(o,e,i,t,()=>{this._updateTooltip(o,t.viewEvent),this._emitReshapeEvent(o)})}_onGraphicMoveCallback(t){const e=this._activeOperationInfo;if(!e)return;const{dx:i,dy:o,graphic:r}=t;e.totalDx+=i,e.totalDy+=o;const{operationType:p}=e,{geometry:s}=r;if(!u(s)){if(p!=="move")this._onHandleMove(r,i,o,t,()=>{this._updateTooltip(r,t.viewEvent),this._emitReshapeEvent(r)});else if(s.type==="point")this._onHandleMove(r,i,o,t,()=>{this._updateTooltip(this.graphic,t.viewEvent),this._emitMoveEvent(i,o)});else if(s.type==="polyline"||s.type==="polygon"){const a=this._getCoordinatesForUI(s);this._updateVertexGraphicLocations(a),this._updateTooltip(this.graphic,t.viewEvent),this._emitMoveEvent(i,o)}}}_onGraphicMoveStopCallback(t){const e=this._activeOperationInfo;if(!e)return;const{dx:i,dy:o,graphic:r}=t,{operationType:p}=e;e.totalDx+=i,e.totalDy+=o,this._onHandleMove(r,i,o,t,()=>p==="move"?this._emitMoveStopEvent():this._emitReshapeStopEvent(r)),this._isMidpoint(r)?this.refresh():(this._updateTooltip(this._isVertex(r)?r:null),this._resetSnappingStateVars(),this._activeOperationInfo=null)}_updateVertexGraphicLocations(t){const e=this.view.spatialReference;for(const i of this.vertexGraphics){const{pathIndex:o,pointIndex:r}=i.attributes,[p,s]=t[o][r];i.geometry=new f({x:p,y:s,spatialReference:e})}this._updateMidpointGraphicLocations(t)}_updateMidpointGraphicLocations(t){for(const e of this.midpointGraphics){const{pathIndex:i,pointIndexStart:o,pointIndexEnd:r}=e.attributes,[p,s]=t[i][o],[a,h]=t[i][r],[n,c]=T([p,s],[a,h]);e.geometry=new f({x:n,y:c,spatialReference:this.view.spatialReference})}}_getIndicesForVertexGraphic({attributes:t}){return[(t==null?void 0:t.pathIndex)||0,(t==null?void 0:t.pointIndex)||0]}_getVertexFromEditGeometry(t){const[e,i]=this._getIndicesForVertexGraphic(t);return this._editGeometryOperations.data.components[e].vertices[i]}_onHandleMove(t,e,i,o,r){O(this._snappingTask);const p=this._snappingContext;if(!p)return;const s=t.geometry,a=o.type==="graphic-move-stop";if(g(this.snappingManager)&&this.selectedVertices.length<2&&!a){const h=this.snappingManager;this._stagedVertex=h.update({point:s,context:p}),this._syncGeometryAfterVertexMove(t,new f(this._stagedVertex),e,i,a),r(),this._snappingTask=D(async n=>{const c=await h.snap({point:s,context:p,signal:n});c.valid&&(this._stagedVertex=c.apply(),this._syncGeometryAfterVertexMove(t,new f(this._stagedVertex),e,i,a),r())})}else{const h=g(this._stagedVertex)?new f(this._stagedVertex):s;this._syncGeometryAfterVertexMove(t,h,e,i,a),r()}}async _syncGeometryAfterVertexMove(t,e,i,o,r=!1){const p=this._editGeometryOperations.data.geometry;if(p.type==="point")t.geometry=e;else{const{x:s,y:a}=e,[h,n]=this._getIndicesForVertexGraphic(t);let c=M(p);const m=c[h].length-1;c[h][n]=[s,a],p.type==="polygon"&&(n===0?c[h][m]=[s,a]:n===m&&(c[h][0]=[s,a])),this._isVertex(t)&&(c=this._moveRelatedCoordinates(c,t,s,a),c=this._moveSelectedHandleCoordinates(c,t,i,o,p.type==="polygon"),this._updateMidpointGraphicLocations(c)),this.graphic.geometry=p.clone();const _=this._getVertexFromEditGeometry(t),x=s-_.pos[0],w=a-_.pos[1];this._editGeometryOperations.moveVertices([_],x,w,0),r&&(this._mover?this._mover.updateGeometry(this._mover.graphics.indexOf(t),e):t.geometry=e)}}_moveRelatedCoordinates(t,e,i,o){const{relatedGraphicIndices:r}=e.attributes;for(const p of r){const s=this.vertexGraphics.getItemAt(p),{pathIndex:a,pointIndex:h}=s.attributes;t[a][h]=[i,o],s.geometry=e.geometry}return t}_moveSelectedHandleCoordinates(t,e,i,o,r){for(const p of this.selectedVertices)if(p!==e){const{pathIndex:s,pointIndex:a,relatedGraphicIndices:h}=p.attributes,n=Y(p.geometry,i,o,this.view),c=t[s].length-1;t[s][a]=[n.x,n.y],p.geometry=n,r&&(a===0?t[s][c]=[n.x,n.y]:a===c&&(t[s][0]=[n.x,n.y]));for(const m of h){const _=this.vertexGraphics.getItemAt(m),{pathIndex:x,pointIndex:w}=_.attributes;t[x][w]=[n.x,n.y],_.geometry=n}}return t}_onGraphicPointerOverCallback(t){const e=t.graphic,i=this._isVertex(e);i&&!this._isSelected(e)&&(e.symbol=this.symbols.vertices.hover),this._updateTooltip(i?e:null),this._updateHoverCursor(e)}_onGraphicPointerOutCallback(t){const e=t.graphic;this._isVertex(e)&&!this._isSelected(e)&&(e.symbol=this.symbols.vertices.default),this.view.cursor="default",this._updateTooltip()}_createVertexFromMidpoint(t){const{_graphicAttributes:e,graphic:i}=this,o=i.geometry;if(u(o)||o.type!=="polygon"&&o.type!=="polyline")return[];const r=o.clone(),p=[],{pathIndex:s,pointIndexStart:a,pointIndexEnd:h}=t.attributes,{x:n,y:c}=t.geometry,m=h===0?a+1:h,_=M(r);return _[s].splice(m,0,[n,c]),t.attributes={...e,pathIndex:s,pointIndex:m,relatedGraphicIndices:[]},p.push({coordinates:_[s][m],componentIndex:s,vertexIndex:m}),this.graphic.geometry=r,p}_addToSelection(t){t instanceof G&&(t=[t]);for(const e of t)e.symbol=this.symbols.vertices.selected;this._set("selectedVertices",this.selectedVertices.concat(t)),this._emitSelectEvent(t)}_removeFromSelection(t,e){const{vertices:i}=this.symbols,o=e?i.hover:i.default;t instanceof G&&(t=[t]);for(const r of t)this.selectedVertices.splice(this.selectedVertices.indexOf(r),1),this._set("selectedVertices",this.selectedVertices),r.set("symbol",o);this._emitDeselectEvent(t)}_clearSelection(){if(this.selectedVertices.length){const t=this.selectedVertices;for(const e of this.selectedVertices)e.set("symbol",this.symbols.vertices.default);this._set("selectedVertices",[]),this._emitDeselectEvent(t)}}_keyDownHandler(t){tt.delete.includes(t.key)&&!t.repeat&&this.selectedVertices.length&&this._removeVertices(this.selectedVertices)}_removeVertices(t){const e=this.graphic.geometry;if(u(e)||e.type!=="polygon"&&e.type!=="polyline"||e.type==="polygon"&&this.vertexGraphics.length<4||this.vertexGraphics.length<3)return;t instanceof G&&(t=[t]);const i=this.graphic.clone(),o=e.clone();let r=M(o);const p=[];t instanceof G&&(t=[t]);for(const s of t){const{x:a,y:h}=s.geometry;for(let n=0;n<r.length;n++){const c=r[n];for(let m=0;m<c.length;m++){const[_,x]=c[m];a===_&&h===x&&(p.push({coordinates:r[n][m],componentIndex:n,vertexIndex:m}),r[n].splice(Number(m),1))}}}if(o.type==="polygon")r=r.filter(s=>{if(s.length<2)return!1;const[a,h]=s[0],[n,c]=s[s.length-1];return(s.length!==2||a!==n||h!==c)&&(a===n&&h===c||s.push(s[0]),!0)}),o.rings=r;else{for(const s of r)s.length===1&&r.splice(r.indexOf(s),1);o.paths=r}this.graphic.geometry=o,this.refresh(),this._emitVertexRemoveEvent(t,i,p)}_isVertex(t){return this.vertexGraphics.includes(t)}_isSelected(t){return this._isVertex(t)&&this.selectedVertices.includes(t)}_isMidpoint(t){return this.midpointGraphics.includes(t)}_updateHoverCursor(t){this.view.cursor=this._isMidpoint(t)?"copy":"move"}_updateTooltip(t,e){u(this._tooltip)||(t?t===this.graphic?this._updateMoveGraphicTooltip(e):this._updateMoveVertexTooltip(e):this._tooltip.clear())}_updateMoveGraphicTooltip(t){const{_tooltip:e,tooltipOptions:i,view:o}=this;if(u(e))return;const r=new at({tooltipOptions:i});if(t){const{x:p,y:s}=t.origin,a=o.toMap(t),h=o.toMap(R(p,s)),n=H(h,a);r.distance=g(n)?n:C}e.info=r}_updateMoveVertexTooltip(t){const{_tooltip:e,graphic:{geometry:i},tooltipOptions:o,view:r}=this;if(u(e))return;const p=new ht({tooltipOptions:o});if(g(i)&&(i.type==="polygon"?p.area=ct(i):i.type==="polyline"&&(p.totalLength=pt(i))),t){const{x:s,y:a}=t.origin,h=r.toMap(t),n=r.toMap(R(s,a)),c=H(n,h);p.distance=g(c)?c:C}e.info=p}_emitMoveStartEvent(t,e){const i=new vt(this.graphic,t,e);this.emit("move-start",i),this.callbacks.onMoveStart&&this.callbacks.onMoveStart(i)}_emitMoveEvent(t,e){const i=new yt(this.graphic,t,e);this.emit("move",i),this.callbacks.onMove&&this.callbacks.onMove(i)}_emitMoveStopEvent(){const t=this._activeOperationInfo;if(!t)return;const{totalDx:e,totalDy:i}=t,o=new _t(this.graphic,e,i);this.emit("move-stop",o),this.callbacks.onMoveStop&&this.callbacks.onMoveStop(o)}_emitReshapeStartEvent(t){const e=new mt(this.graphic,t,this.selectedVertices);this.emit("reshape-start",e),this.callbacks.onReshapeStart&&this.callbacks.onReshapeStart(e)}_emitReshapeEvent(t){const e=new lt(this.graphic,t,this.selectedVertices);this.emit("reshape",e),this.callbacks.onReshape&&this.callbacks.onReshape(e)}_emitReshapeStopEvent(t){const e=new dt(this.graphic,t,this.selectedVertices);this.emit("reshape-stop",e),this.callbacks.onReshapeStop&&this.callbacks.onReshapeStop(e)}_emitSelectEvent(t){const e=new gt(t);this.emit("select",e),this.callbacks.onVertexSelect&&this.callbacks.onVertexSelect(e)}_emitDeselectEvent(t){const e=new ut(t);this.emit("deselect",e),this.callbacks.onVertexDeselect&&this.callbacks.onVertexDeselect(e)}_emitVertexAddEvent(t,e,i){const o=new xt(t,this.graphic,e,i);this.emit("vertex-add",o),this.callbacks.onVertexAdd&&this.callbacks.onVertexAdd(o)}_emitVertexRemoveEvent(t,e,i){const o=new ft(t,this.graphic,e,i);this.emit("vertex-remove",o),this.callbacks.onVertexRemove&&this.callbacks.onVertexRemove(o)}_logGeometryTypeError(){U.getLogger(this.declaredClass).error(new L("reshape:invalid-geometry","Reshape operation not supported for the provided graphic. The geometry type is not supported."))}};d([v()],l.prototype,"_tooltip",void 0),d([v()],l.prototype,"callbacks",void 0),d([v()],l.prototype,"enableMidpoints",void 0),d([v()],l.prototype,"enableMovement",void 0),d([v()],l.prototype,"enableVertices",void 0),d([v()],l.prototype,"graphic",void 0),d([v({value:!0})],l.prototype,"highlightsEnabled",null),d([v()],l.prototype,"layer",void 0),d([v({readOnly:!0})],l.prototype,"midpointGraphics",void 0),d([v()],l.prototype,"midpointSymbol",void 0),d([v({readOnly:!0})],l.prototype,"selectedVertices",void 0),d([v()],l.prototype,"snappingManager",void 0),d([v({readOnly:!0})],l.prototype,"state",null),d([v({value:E})],l.prototype,"symbols",null),d([v({type:$})],l.prototype,"tooltipOptions",void 0),d([v({readOnly:!0})],l.prototype,"type",void 0),d([v({readOnly:!0})],l.prototype,"vertexGraphics",void 0),d([v()],l.prototype,"view",void 0),l=d([F("esri.views.draw.support.Reshape")],l);const Xs=l;export{Xs as default};
